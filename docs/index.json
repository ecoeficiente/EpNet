{
  "api/EpNet.ExtensionMethods.html": {
    "href": "api/EpNet.ExtensionMethods.html",
    "title": "Class ExtensionMethods | EpNet",
    "keywords": "Class ExtensionMethods Namespace EpNet Assembly EpNet.dll Provides additional functionality in the form of extension methods. public static class ExtensionMethods Inheritance object ExtensionMethods Methods CommonEnding(IEnumerable<string>) Gets the substring in common at the end of a list of strings public static string CommonEnding(this IEnumerable<string> stringList) Parameters stringList IEnumerable<string> Returns string Common ending substring CommonEnding(string, string) Gets the substring in common at the end of two strings. public static string CommonEnding(this string text1, string text2) Parameters text1 string Current string. text2 string Second string. Returns string Common ending substring ContainsIgnoreCase(IEnumerable<string>, string) Determines whether a sequence of strings contains a specified string. Ignores case. public static bool ContainsIgnoreCase(this IEnumerable<string> s, string value) Parameters s IEnumerable<string> Sequence of strings value string Search value. Returns bool true if sequence contains the search string. ContainsIgnoreCase(string, string) Determines whether a specified substring occurs within this string. public static bool ContainsIgnoreCase(this string s, string value) Parameters s string Current string. value string Search substring. Returns bool true if current string contains search substring. ContainsIgnoreCase(string, params string[]) Determines whether any of the specified substrings occurs within this string. public static bool ContainsIgnoreCase(this string s, params string[] values) Parameters s string Current string. values string[] Search substrings. Returns bool true if current string contains search substring. ContainsWord(string, string) Gets if the field string contains the whole string word. Ignores case. public static bool ContainsWord(this string field, string word) Parameters field string string where to look for word string searched string Returns bool true if found Deserialize(Type, string) Deserializes an object which is saved to an XML data string. public static object Deserialize(Type toDeserialize, string xmlData) Parameters toDeserialize Type A type of an object of which XML data to deserialize. xmlData string A string containing a serialized XML data do deserialize. Returns object An object which is deserialized from the XML data string. Deserialize<T>(T, string) Deserializes an object which is saved to an XML data string. If the object has no instance a new object will be constructed if possible. note An exception will occur if a null reference is called an no valid constructor of the class is available. public static T Deserialize<T>(this T toDeserialize, string xmlData) Parameters toDeserialize T An object of which XML data to deserialize. If the object is null a a default constructor is called. xmlData string A string containing a serialized XML data do deserialize. Returns T An object which is deserialized from the XML data string. Type Parameters T An object to deserialize from a XML data string. EndsWithIgnoreCase(string, string) Determines whether the end of this string instance matches the specified string. Ignores case. public static bool EndsWithIgnoreCase(this string s, string value) Parameters s string Current string. value string Search substring. Returns bool true if current string ends with substring. EqualsIgnoreCase(string, string) Determines whether two strings are equal ignoring case public static bool EqualsIgnoreCase(this string s, string value) Parameters s string First string. value string Second strings Returns bool true if both strings are equal ignoring case. Find(IEnumerable<IdfObject>, string) Searches for an IdfObject within the given collection that matches the specified name. Raises an exception if not found. public static IdfObject Find(this IEnumerable<IdfObject> idfObjects, string name) Parameters idfObjects IEnumerable<IdfObject> An IEnumerable collection of IdfObject instances to search. name string The name of the IdfObject to find. The search is case-sensitive. Returns IdfObject The first IdfObject in the collection that matches the specified name. FindByField(List<IdfObject>, int, string) Returns the first idfObject where the provided field matches the value. public static IdfObject FindByField(this List<IdfObject> idfObjects, int field, string value) Parameters idfObjects List<IdfObject> idfObject List field int field number value string value to find Returns IdfObject First idfObjectFound FindByField(List<IdfObject>, string, string) Returns the first idfObject where the provided field matches the value. public static IdfObject FindByField(this List<IdfObject> idfObjects, string field, string value) Parameters idfObjects List<IdfObject> idfObject List field string field name value string value to find Returns IdfObject First idfObjectFound GetByName(IEnumerable<IdfObject>, string) Get the first element of a list of IdfObjects with a certain name public static IdfObject GetByName(this IEnumerable<IdfObject> idf, string name) Parameters idf IEnumerable<IdfObject> List of IdfObjects name string name to find Returns IdfObject IdfObject with Name as name GetData(IEnumerable<IdfObject>, int, int) Gets a Dictionary<string,double>> with Keys as first field string values and Values as second field numeric values. public static Dictionary<string, double> GetData(this IEnumerable<IdfObject> idf, int firstField, int secondField) Parameters idf IEnumerable<IdfObject> Idf Object IEnumerable firstField int Zero-based first field position. secondField int Zero-based second field position. Returns Dictionary<string, double> Dictionary with Keys as first fields and Values as second fields. GetData(IEnumerable<IdfObject>, string, string) Gets a Dictionary<string,double> with Keys as first field string values and Values as second field numeric values. public static Dictionary<string, double> GetData(this IEnumerable<IdfObject> idf, string firstField, string secondField) Parameters idf IEnumerable<IdfObject> Idf Object IEnumerable firstField string First field name. secondField string Second field name. Returns Dictionary<string, double> Dictionary with Keys as first fields and Values as second fields. GetData<T>(IEnumerable<IdfObject>, int, int) Gets a Dictionary<string,T>> with Keys as first field string values and Values as second field T values. public static Dictionary<string, T> GetData<T>(this IEnumerable<IdfObject> idf, int firstField, int secondField) Parameters idf IEnumerable<IdfObject> Idf Object IEnumerable firstField int Zero-based first field position. secondField int Zero-based second field position. Returns Dictionary<string, T> Dictionary with Keys as first fields and Values as second fields. Type Parameters T double or string depending on the type of the second field GetData<T>(IEnumerable<IdfObject>, string, string) Gets a Dictionary<string,T>> with Keys as first field string values and Values as second field T values. public static Dictionary<string, T> GetData<T>(this IEnumerable<IdfObject> idf, string firstField, string secondField) Parameters idf IEnumerable<IdfObject> Idf Object IEnumerable firstField string First field name. secondField string Second field name. Returns Dictionary<string, T> Dictionary with Keys as first fields and Values as second fields. Type Parameters T double or string depending on the type of the second field OR(bool, params bool[]) Alternative to || operator since DesignBuilder text parser does not allow | symbol public static bool OR(this bool left, params bool[] others) Parameters left bool left condition others bool[] right conditions Returns bool the boolean OR between the conditions OR(IEnumerable<bool>) Alternative to || operator since DesignBuilder text parser does not allow | symbol public static bool OR(this IEnumerable<bool> conditions) Parameters conditions IEnumerable<bool> List of conditions Returns bool OR of the conditions ReadData(IdfObject, string) Reads data from the Precomments of an idfObject public static string ReadData(this IdfObject idfObject, string key) Parameters idfObject IdfObject key string Returns string RemoveData(IdfObject, string) Removes data from the precomments of an idfObject public static void RemoveData(this IdfObject idfObject, string key) Parameters idfObject IdfObject key string Serialize<T>(T) A helper to serialize an object to a string containing XML data of the object. public static string Serialize<T>(this T toSerialize) Parameters toSerialize T A helper method for any type of object to be serialized to a XML data string. Returns string A string containing XML data of the object. Type Parameters T An object to serialize to a XML data string. StartsWithAny(string, IEnumerable<string>) Checks if the source string starts with any of the provided prefixes. Ignores case. public static bool StartsWithAny(this string source, IEnumerable<string> prefixes) Parameters source string The source string to check. prefixes IEnumerable<string> An enumerable collection of prefixes to compare against the source string. Returns bool True if the source string starts with any of the given prefixes; otherwise, false. StartsWithIgnoreCase(string, string) Determines whether the beginning of this string instance matches the specified string. Ignores case. public static bool StartsWithIgnoreCase(this string s, string value) Parameters s string Current string. value string Search substring. Returns bool true if current string starts with substring. ToInt(string) Converts from string to double using InvariantCulture. public static double ToInt(this string value) Parameters value string string value. Returns double double value. ToInt(string, CultureInfo) Converts from string to int using a specified Culture format. public static int ToInt(this string value, CultureInfo culture) Parameters value string string value. culture CultureInfo Returns int int value. ToNumber(string) Converts from string to double using InvariantCulture. public static double ToNumber(this string value) Parameters value string string value. Returns double double value. ToNumber(string, CultureInfo) Converts from string to double using a specified Culture format. public static double ToNumber(this string value, CultureInfo culture) Parameters value string string value. culture CultureInfo Returns double double value. ToText(double) Converts from number to string in InvariantCulture format public static string ToText(this double value) Parameters value double numeric value. Returns string string value. ToText(double, CultureInfo) Converts from number to string in the specified Culture format public static string ToText(this double value, CultureInfo culture) Parameters value double numeric value culture CultureInfo Returns string string Value ToText(int) Converts from number to string in InvariantCulture format public static string ToText(this int value) Parameters value int numeric value. Returns string string value. ToText(int, CultureInfo) Converts from number to string in the specified Culture format public static string ToText(this int value, CultureInfo culture) Parameters value int numeric value culture CultureInfo Returns string string Value TrimFromEnd(string, string) Trims the end of a string from the position where endString is found. public static string TrimFromEnd(this string text, string endString) Parameters text string Current string. endString string Search string. Returns string Trimmed string Update(IEnumerable<IdfObject>, Dictionary<string, double>, int, int) From a provided dictionary, updates a field in a list of idf objects with Value where another field matches the Key. public static void Update(this IEnumerable<IdfObject> idf, Dictionary<string, double> dictionary, int firstField, int secondField) Parameters idf IEnumerable<IdfObject> idf objects enumerable dictionary Dictionary<string, double> Dictionary<string,double> where keys are strings that have to match the first field and values are the new values for the second field. firstField int field with text value secondField int field with numeric value Update(IEnumerable<IdfObject>, Dictionary<string, double>, string, string) From a provided dictionary, updates a field in a list of idf objects with Value where another field matches the Key. public static void Update(this IEnumerable<IdfObject> idf, Dictionary<string, double> dictionary, string firstField, string secondField) Parameters idf IEnumerable<IdfObject> idf objects enumerable dictionary Dictionary<string, double> Dictionary<string,double> where keys are strings that have to match the first field and values are the new values for the second field. firstField string field with text value secondField string field with numeric value Update(IEnumerable<IdfObject>, Dictionary<string, string>, int, int) From a provided dictionary, updates a field in a list of idf objects with Value where another field matches the Key. public static void Update(this IEnumerable<IdfObject> idf, Dictionary<string, string> dictionary, int firstField, int secondField) Parameters idf IEnumerable<IdfObject> idf objects enumerable dictionary Dictionary<string, string> Dictionary<string,string> where keys are strings that have to match the first field and values are the new values for the second field. firstField int field with text value secondField int field with text value Update(IEnumerable<IdfObject>, Dictionary<string, string>, string, string) From a provided dictionary, updates a field in a list of idf objects with Value where another field matches the Key. public static void Update(this IEnumerable<IdfObject> idf, Dictionary<string, string> dictionary, string firstField, string secondField) Parameters idf IEnumerable<IdfObject> idf objects enumerable dictionary Dictionary<string, string> Dictionary<string,string> where keys are strings that have to match the first field and values are the new values for the second field. firstField string field with text value secondField string field with text value WithoutCommonEnding(IEnumerable<string>) Returns the list of strings without the common ending removed (all share the same common ending) public static IEnumerable<string> WithoutCommonEnding(this IEnumerable<string> stringList) Parameters stringList IEnumerable<string> List of string Returns IEnumerable<string> List of strings where the end of the string in common has been removed. WriteData(IdfObject, string, string) Writes data to the precomments of an idfObject public static void WriteData(this IdfObject idfObject, string key, string value) Parameters idfObject IdfObject key string value string"
  },
  "api/EpNet.Field.html": {
    "href": "api/EpNet.Field.html",
    "title": "Class Field | EpNet",
    "keywords": "Class Field Namespace EpNet Assembly EpNet.dll Field class represent a field in an idf object. It implements methods for getting/setting numeric or string values. Value property refers to the string representation of the field but if the field is numeric it can also be retrieved as a double variable using the Number property. public class Field Inheritance object Field Extension Methods ExtensionMethods.Deserialize<T>(T, string) ExtensionMethods.Serialize<T>(T) Constructors Field(IdfObject, int) public Field(IdfObject idfObject, int index) Parameters idfObject IdfObject index int Properties Comment The comment associated to the field (represented as !- comment at the right of the value) public string Comment { get; set; } Property Value string Comment text Name Official field name (from E+ IDD) public string Name { get; } Property Value string Number When the field is numeric, gets/sets its value as a double variable. public double Number { get; set; } Property Value double Numeric (double) value of the field. UpperCase Returns field string value in uppercase. public string UpperCase { get; } Property Value string Field in uppercase Value Get/sets field string value. public string Value { get; set; } Property Value string Field string value. Methods Contains(string) Returns a value indicating whether a specified substring occurs within the string value of the field. public bool Contains(string value) Parameters value string Substring to be searched within the field. Returns bool True if field contains substring. False otherwise. ContainsIgnoreCase(string) Returns a value indicating whether a specified substring occurs within the string value of the field. Case is ignored. public bool ContainsIgnoreCase(string value) Parameters value string Substring to be searched within the field. Returns bool True if field contains substring. False otherwise. ContainsIgnoreCase(params string[]) Determines whether any of the specified substrings occurs within this string. public bool ContainsIgnoreCase(params string[] values) Parameters values string[] Search substrings. Returns bool true if current string contains search substring. EndsWith(string) Determines whether the end of the string value of the field matches the specified substring. public bool EndsWith(string value) Parameters value string Substring to be searched at the end of the field. Returns bool True if field ends in the substring. False otherwise. Equals(Field) Determines whether this instance string value and a specified string, have the same value. public bool Equals(Field field) Parameters field Field The field to compare. Returns bool true if the string value of this instance is the same as field string value; otherwise, false. Equals(double) Determines whether this instance numeric value and a specified number, have the same value. public bool Equals(double num) Parameters num double The number to compare. Returns bool true if the numeric value of this instance is the same as num; otherwise, false. Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool Equals(string) Determines whether this instance string value and a specified string, have the same value. public bool Equals(string str) Parameters str string The string to compare. Returns bool true if the string value of this instance is the same as str; otherwise, false. IsNumber() Determines whether the field is numeric or not. public bool IsNumber() Returns bool true if the field is numeric; otherwise, false. Match(string) Returns the first IdfObject from the supplied class whose first field matches this field public IdfObject Match(string idfClass) Parameters idfClass string IdfClass to search for Returns IdfObject Matching idfobject Set(double) Sets the value of the parameter as a double public void Set(double number) Parameters number double Numeric (double) value of the field. Set(string) Sets the value of the parameter as a string public void Set(string value) Parameters value string StartsWith(string) Determines whether the beginning of the string value of the field matches the specified substring. public bool StartsWith(string value) Parameters value string Substring to be searched at the start of the field. Returns bool True if field begins with the substring. False otherwise. Operators operator ==(Field, Field) Determines whether a field string value and a specified field string value, are equal (case-insensitive). public static bool operator ==(Field a, Field b) Parameters a Field The first field to compare b Field The second field to compare. Returns bool true if the string value of field a is the same as the string value of b field; otherwise, false. operator ==(Field, double) Determines whether a field numeric value equals a specified number. public static bool operator ==(Field a, double b) Parameters a Field The field to compare b double The double to compare. Returns bool true if the numeric value of field a is the same as b; otherwise, false. operator ==(Field, string) Determines whether a field string value and a specified string, have the same value. public static bool operator ==(Field a, string b) Parameters a Field The field to compare b string The string to compare. Returns bool true if the string value of field a is the same as b string; otherwise, false. operator !=(Field, Field) Determines whether a field string value and a specified field string value, are different (case-insensitive). public static bool operator !=(Field a, Field b) Parameters a Field The first field to compare b Field The second field to compare. Returns bool true if the string value of field a is different than the string value of b field; otherwise, false. operator !=(Field, double) Determines whether a field numeric value equals a specified number.. public static bool operator !=(Field a, double b) Parameters a Field The field to compare b double The double to compare. Returns bool true if the numeric value of field a is different than b; otherwise, false. operator !=(Field, string) Determines whether a field string value and a specified string, are different. public static bool operator !=(Field a, string b) Parameters a Field The field to compare b string The string to compare. Returns bool true if the string value of field a is different than b string; otherwise, false."
  },
  "api/EpNet.Helpers.ExtensionMethods.html": {
    "href": "api/EpNet.Helpers.ExtensionMethods.html",
    "title": "Class ExtensionMethods | EpNet",
    "keywords": "Class ExtensionMethods Namespace EpNet.Helpers Assembly EpNet.dll Provides additional functionality in the form of extension methods. public static class ExtensionMethods Inheritance object ExtensionMethods Methods CleanSchedules(IdfReader) Removes duplicated schedules. public static void CleanSchedules(this IdfReader idf) Parameters idf IdfReader Idf Reader GenerateScheduleViews(IdfReader, bool, params string[]) Creates a special idf that generates schedule profiles as results once simulated. public static void GenerateScheduleViews(this IdfReader idf, bool designDays = false, params string[] schedules) Parameters idf IdfReader Idf Reader designDays bool Generates profiles for design days if true. schedules string[] List of schedule names, optional. GetAirloopZones(IdfReader) Get a Dictionary <Key,Value> with airloop names as Keys and List of zones as Values. public static Dictionary<string, List<string>> GetAirloopZones(this IdfReader idf) Parameters idf IdfReader IdfReader Returns Dictionary<string, List<string>> Dictionary with airloops and list of zones. GetArea(IdfObject, bool) Get the area of a zone or any opaque, shading or window surface. If window, it includes the frame. public static double GetArea(this IdfObject idfObject, bool includeMultiplier = true) Parameters idfObject IdfObject includeMultiplier bool Returns double Surface area (m²). GetAzimuth(IdfObject) Get the azimuth of any opaque, shading or window surface public static double GetAzimuth(this IdfObject idfObject) Parameters idfObject IdfObject Returns double Surface azimuth (deg). GetDividerArea(IdfObject, bool) Gets the area of the dividers of a window (FenestrationSurface:Detailed) public static double GetDividerArea(this IdfObject idfObject, bool includeMultiplier = true) Parameters idfObject IdfObject IdfObject of type FenestrationSurface:Detailed includeMultiplier bool Include the window multiplers to calculate the total area Returns double GetFrameArea(IdfObject, bool) Gets the area of the frame of a window (FenestrationSurface:Detailed) public static double GetFrameArea(this IdfObject idfObject, bool includeMultiplier = true) Parameters idfObject IdfObject IdfObject of type FenestrationSurface:Detailed includeMultiplier bool Include the window multiplers to calculate the total area Returns double GetGlassArea(IdfObject, bool) Get the area of a window surface without the frame (but with dividers) public static double GetGlassArea(this IdfObject idfObject, bool includeMultiplier = true) Parameters idfObject IdfObject includeMultiplier bool Returns double Surface area (m²). GetHeight(IdfObject) Get the height of any opaque, shading or window surface public static double GetHeight(this IdfObject idfObject) Parameters idfObject IdfObject Returns double Surface height (m). GetInsulationResistance(IdfObject) Gets the thermal resistance of the most insulating layer public static double GetInsulationResistance(this IdfObject idf) Parameters idf IdfObject Returns double GetMaxZ(IdfObject) Gets the maximum Z value for this idfObject (must be a surface) public static double GetMaxZ(this IdfObject idfObject) Parameters idfObject IdfObject Detailed Surface idfObject Returns double Maximum Z rounded to the mm GetMinZ(IdfObject) Gets the minimum Z value for this idfObject (must be a surface) public static double GetMinZ(this IdfObject idfObject) Parameters idfObject IdfObject Detailed Surface idfObject Returns double Minimum Z rounded to the mm GetNetArea(IdfObject) Get the area of a surface discounting windows area. public static double GetNetArea(this IdfObject idfObject) Parameters idfObject IdfObject Idf Object Returns double Net area (m²). GetNetGlassArea(IdfObject, bool) Get the glass area of a window surface without the frame and dividers public static double GetNetGlassArea(this IdfObject idfObject, bool includeMultiplier = true) Parameters idfObject IdfObject includeMultiplier bool Returns double Surface area (m²). GetOpeningArea(IdfObject) Get the area of a surface occuppied by windows. public static double GetOpeningArea(this IdfObject idfObject) Parameters idfObject IdfObject Idf Object Returns double Opening area (m²). GetOrientation(IdfObject) Get the orientation of any opaque, shading or window surface public static Orientation GetOrientation(this IdfObject idf) Parameters idf IdfObject Returns Orientation Surface orientation. GetOrientationCTE(IdfObject) public static OrientacionCTE GetOrientationCTE(this IdfObject idf) Parameters idf IdfObject Returns OrientacionCTE GetOutdoorAirFlow(IdfObject) Gets Zone Outdoor airflow rate (m³/s) public static double GetOutdoorAirFlow(this IdfObject idfZoneObject) Parameters idfZoneObject IdfObject Idf Object Returns double Outdoor airflow (m³/s) GetPerimeter(IdfObject) Gets the perimeter of a surface public static double GetPerimeter(this IdfObject idfObject) Parameters idfObject IdfObject Detailed Surface idfObject Returns double GetPerimeterAt(IdfObject, double) Gets the perimeter for the segments of a surface at a certain height public static double GetPerimeterAt(this IdfObject idfObject, double height) Parameters idfObject IdfObject Detailed Surface idfObject height double Height Returns double GetResistance(IdfObject) Gets the surface-to-surface resistance of a Construction idf object. public static double GetResistance(this IdfObject idf) Parameters idf IdfObject Construction Idf Object Returns double Resistance (m²·K/W) GetTilt(IdfObject) Get the tilt of any opaque, shading or window surface public static double GetTilt(this IdfObject idfObject) Parameters idfObject IdfObject Idf Object Returns double Surface tilt (deg). GetVolume(IdfObject, bool) Get the volume of a zone public static double GetVolume(this IdfObject idfObject, bool includeMultiplier = true) Parameters idfObject IdfObject idfObject of type Zone includeMultiplier bool Returns double Zone volume GetWidth(IdfObject) Get the width of any opaque, shading or window surface public static double GetWidth(this IdfObject idfObject) Parameters idfObject IdfObject Returns double Surface width (m). GetZoneAirLoop(IdfReader, string) Gets the airloop name a zone belongs to. public static string GetZoneAirLoop(this IdfReader idf, string zone) Parameters idf IdfReader IdfReader zone string Zone name. Returns string Airloop name. InvertSchedule(IdfObject, string) Adds a schedule appending \"_Inverted\" to the name where all values are inverted (if 0 then 1 and if different from 0 then 0) public static void InvertSchedule(this IdfObject idfSchedule, string newName = \"\") Parameters idfSchedule IdfObject Idf schedule object to invert newName string Optional. Name is changed into this. ScaleWindow(IdfObject, double) Scales a window by a certain area ratio public static void ScaleWindow(this IdfObject window, double scale) Parameters window IdfObject FenestrationSurface:Detailed idfObject scale double area ratio for scaling"
  },
  "api/EpNet.Helpers.ParameterComparer.html": {
    "href": "api/EpNet.Helpers.ParameterComparer.html",
    "title": "Class ParameterComparer | EpNet",
    "keywords": "Class ParameterComparer Namespace EpNet.Helpers Assembly EpNet.dll Provides an IdfObject comparar that does not take the object name for the comparison public class ParameterComparer Inheritance object ParameterComparer Extension Methods ExtensionMethods.Deserialize<T>(T, string) ExtensionMethods.Serialize<T>(T)"
  },
  "api/EpNet.Helpers.html": {
    "href": "api/EpNet.Helpers.html",
    "title": "Namespace EpNet.Helpers | EpNet",
    "keywords": "Namespace EpNet.Helpers Classes ExtensionMethods Provides additional functionality in the form of extension methods. ParameterComparer Provides an IdfObject comparar that does not take the object name for the comparison"
  },
  "api/EpNet.Idd.html": {
    "href": "api/EpNet.Idd.html",
    "title": "Class Idd | EpNet",
    "keywords": "Class Idd Namespace EpNet Assembly EpNet.dll This class is used to store a reference to a specific Energy+.idd version so that field number/name conversion is done accordingly. public class Idd Inheritance object Idd Extension Methods ExtensionMethods.Deserialize<T>(T, string) ExtensionMethods.Serialize<T>(T) Remarks Idd file is not loaded until the first time a field is referred by name. This reduces overhead if only field numbers (positions) are used. Constructors Idd(string) Creates and Idd object from the path to the specified Energy+.idd file. public Idd(string iddFilePath) Parameters iddFilePath string Energy+.idd file path."
  },
  "api/EpNet.IdfObject.html": {
    "href": "api/EpNet.IdfObject.html",
    "title": "Class IdfObject | EpNet",
    "keywords": "Class IdfObject Namespace EpNet Assembly EpNet.dll Represents an individual idf object, as a enumeration of fields public class IdfObject : IEquatable<IdfObject> Inheritance object IdfObject Implements IEquatable<IdfObject> Extension Methods ExtensionMethods.Deserialize<T>(T, string) ExtensionMethods.ReadData(IdfObject, string) ExtensionMethods.RemoveData(IdfObject, string) ExtensionMethods.Serialize<T>(T) ExtensionMethods.WriteData(IdfObject, string, string) ExtensionMethods.GetArea(IdfObject, bool) ExtensionMethods.GetAzimuth(IdfObject) ExtensionMethods.GetDividerArea(IdfObject, bool) ExtensionMethods.GetFrameArea(IdfObject, bool) ExtensionMethods.GetGlassArea(IdfObject, bool) ExtensionMethods.GetHeight(IdfObject) ExtensionMethods.GetInsulationResistance(IdfObject) ExtensionMethods.GetMaxZ(IdfObject) ExtensionMethods.GetMinZ(IdfObject) ExtensionMethods.GetNetArea(IdfObject) ExtensionMethods.GetNetGlassArea(IdfObject, bool) ExtensionMethods.GetOpeningArea(IdfObject) ExtensionMethods.GetOrientation(IdfObject) ExtensionMethods.GetOrientationCTE(IdfObject) ExtensionMethods.GetOutdoorAirFlow(IdfObject) ExtensionMethods.GetPerimeter(IdfObject) ExtensionMethods.GetPerimeterAt(IdfObject, double) ExtensionMethods.GetResistance(IdfObject) ExtensionMethods.GetTilt(IdfObject) ExtensionMethods.GetVolume(IdfObject, bool) ExtensionMethods.GetWidth(IdfObject) ExtensionMethods.InvertSchedule(IdfObject, string) ExtensionMethods.ScaleWindow(IdfObject, double) Constructors IdfObject() Creates a new IdfObject instance public IdfObject() IdfObject(IEnumerable<string>) Creates a new IdfObject instance from a IEnumerable of of field strings. public IdfObject(IEnumerable<string> fields) Parameters fields IEnumerable<string> List of fields IdfObject(params string[]) Creates a new IdfObject instance from a list of fields public IdfObject(params string[] fields) Parameters fields string[] List of fields Properties Comments List of idf comments in the object. public List<string> Comments { get; set; } Property Value List<string> Idf comments. Count Number of fields in the object. public int Count { get; } Property Value int Number of fields. Fields public List<Field> Fields { get; } Property Value List<Field> IdfClass Idf class of the object (e.g.Runperiod, BuildingSurface:Detailed, Zone...). public string IdfClass { get; set; } Property Value string Name of the IdfClass IdfReader Reference to the parent IdfReader that owns this IdfObject. public IdfReader IdfReader { get; set; } Property Value IdfReader Parent IdfReader this[int] Returns the field in a specific position from the idf object public Field this[int index] { get; } Parameters index int Zero-based index of the field. Property Value Field Field object. this[string] Returns the field with a specified name from the idf object public Field this[string name] { get; } Parameters name string Standard name of the field (as found in Energy+.idd file) Property Value Field Field object Name Returns the first value of the idfobject. Usually the name. public string Name { get; set; } Property Value string Name of the idfobject PreComments List of idf comments preceding the object. public List<string> PreComments { get; set; } Property Value List<string> Comments preceding the idf object. Methods AddField(string, string) Append one field to an idf object. public void AddField(string field, string comment = \"\") Parameters field string Field value comment string Field comment AddFields(params string[]) Append fields to an idf object. Comments are defaulted to blank. public void AddFields(params string[] fields) Parameters fields string[] List of fields Clone() Returns a copy of the specified idf object. public IdfObject Clone() Returns IdfObject Cloned idf object. ContainsValue(string) Returns true if any field of the idfobject contains the provided string value public bool ContainsValue(string value) Parameters value string value to search for Returns bool true if contains the value. false otherwise. Equals(IdfObject) Determines whether this instance and a specified object, have the same field values. public bool Equals(IdfObject obj) Parameters obj IdfObject Returns bool true if all the fields are the same as in this instance; otherwise, false. EqualsParameters(IdfObject) Determines whether all the fields, but the name, in two specified idf objects are equal. public bool EqualsParameters(IdfObject idfObject) Parameters idfObject IdfObject Second object to be compared with. Returns bool true if equal but name InsertField(int, string, string) Insert one field to an idf object at the specified index. public void InsertField(int index, string field, string comment = \"\") Parameters index int The zero-based index at which the field will be inserted field string Field value comment string Field comment InsertFields(int, params string[]) Insert a list of fields to an idf object at the specified index. Comments are defaulted to blank. public void InsertFields(int index, params string[] fields) Parameters index int The zero-based index at which the fields will be inserted fields string[] List of fields RemoveField(int) Remove one field to an idf object. public void RemoveField(int index) Parameters index int Field index RemoveFields(int, int) Remove fields to an idf object. public void RemoveFields(int index, int count) Parameters index int Start field index count int Number of fields to remove ToString() Gets the formatted text representation of the idf object in EnergyPlus format including comments. public override string ToString() Returns string idf text string. ToString(bool) Gets the formatted text representation of the idf object in EnergyPlus format public string ToString(bool comments) Parameters comments bool sets whether comments are included in the output string. Returns string idf text string. Values(int, int, int) Returns a selection of the string values of the fields public IEnumerable<string> Values(int start = 1, int skip = 1, int end = 1000) Parameters start int First position to start skip int Values to skip between previous and next selected value end int Last position to select Returns IEnumerable<string> List of selected values Operators operator ==(IdfObject, IdfObject) Determines whether all the fields, including the name, in two specified idf objects are equal. public static bool operator ==(IdfObject a, IdfObject b) Parameters a IdfObject The first idf object to compare b IdfObject The second idf object to compare. Returns bool true if the value of a is the same as the value of b; otherwise, false. operator !=(IdfObject, IdfObject) Determines if two specified idf objects are different by at least one field. public static bool operator !=(IdfObject a, IdfObject b) Parameters a IdfObject The first idf object to compare. b IdfObject The second idf object to compare. Returns bool false if the all the fields in a are the same as the fields in b; otherwise, true."
  },
  "api/EpNet.IdfReader.html": {
    "href": "api/EpNet.IdfReader.html",
    "title": "Class IdfReader | EpNet",
    "keywords": "Class IdfReader Namespace EpNet Assembly EpNet.dll Provides methods to manipulate an idf model by accessing to the different idf classes and their fields. public class IdfReader : List<IdfObject> Inheritance object List<IdfObject> IdfReader Extension Methods ExtensionMethods.Deserialize<T>(T, string) ExtensionMethods.Serialize<T>(T) ExtensionMethods.CleanSchedules(IdfReader) ExtensionMethods.GenerateScheduleViews(IdfReader, bool, params string[]) ExtensionMethods.GetAirloopZones(IdfReader) ExtensionMethods.GetZoneAirLoop(IdfReader, string) LEED.InfiltrationRateAshrae(IdfReader) LEED.InfiltrationRateAshrae(IdfReader, IEnumerable<string>) LEED.InfiltrationRateAshrae(IdfReader, string) LEED.SetFanPressures(IdfReader, string, params SystemProperties[]) ExtensionMethods.Find(IEnumerable<IdfObject>, string) ExtensionMethods.GetByName(IEnumerable<IdfObject>, string) ExtensionMethods.GetData(IEnumerable<IdfObject>, int, int) ExtensionMethods.GetData(IEnumerable<IdfObject>, string, string) ExtensionMethods.GetData<T>(IEnumerable<IdfObject>, int, int) ExtensionMethods.GetData<T>(IEnumerable<IdfObject>, string, string) ExtensionMethods.Update(IEnumerable<IdfObject>, Dictionary<string, double>, int, int) ExtensionMethods.Update(IEnumerable<IdfObject>, Dictionary<string, double>, string, string) ExtensionMethods.Update(IEnumerable<IdfObject>, Dictionary<string, string>, int, int) ExtensionMethods.Update(IEnumerable<IdfObject>, Dictionary<string, string>, string, string) ExtensionMethods.FindByField(List<IdfObject>, int, string) ExtensionMethods.FindByField(List<IdfObject>, string, string) Examples var Idf = new IdfReader(); foreach (var m in Idf[\"Material\"].Where(m=>m[\"Name\"].Contains(\"Insulation\"))) m[\"Conductivity\"].Number = 0.03; Constructors IdfReader() Creates an IdfReader object loading in.idf and Energy+.idd from the standard DesignBuilder installation path. public IdfReader() IdfReader(string) Creates an IdfReader object loading Energy+.idd from the standard DesignBuilder installation path. public IdfReader(string idfFile) Parameters idfFile string Path to an idf file or a string with the contents of the file IdfReader(string, Idd) Creates an IdfReader object from an idf file path (or text content) and the Idd object from another IdfReader. public IdfReader(string idfFile, Idd idd) Parameters idfFile string Path to an idf file or a string with the contents of the file idd Idd Reference to the Idd from another IdfReader IdfReader(string, string) Creates an IdfReader object from an idf file path (or text content) and the path to Energy+.idd file. public IdfReader(string idfFile, string iddFilePath) Parameters idfFile string Path to an idf file or a string with the contents of the file iddFilePath string Path to the Energy+.idd file corresponding to the E+ version of the idf file. Properties DsbFileName Filename of the dsb file from which the idf has been generated. public string DsbFileName { get; } Property Value string dsb filename DsbFolder Folder where the original dsb file is located. public string DsbFolder { get; } Property Value string dsb file folder DsbPath Full path of the dsb file from which the idf has been generated. public string DsbPath { get; } Property Value string Path of the dsb file. EnergyPlusPath public string EnergyPlusPath { get; set; } Property Value string Idd Reference to the Idd object that holds the variable names from the Energy+.idd public Idd Idd { get; set; } Property Value Idd Idd object Idf Provides a single Idf instance to be shared between scripts. public static IdfReader Idf { get; } Property Value IdfReader IdfEncoding public Encoding IdfEncoding { get; set; } Property Value Encoding IdfPath Path to the idf file public string IdfPath { get; set; } Property Value string Path to the loaded idf file this[string] List of all the idf objects from the specified idf class. public List<IdfObject> this[string idfClass] { get; } Parameters idfClass string idf class to use as a filter Property Value List<IdfObject> idf objects list from a class Examples var allZones = Idf[\"Zone\"]; this[string[]] List of all the idf objects from the specified idf classes. public List<IdfObject> this[params string[] idfClasses] { get; } Parameters idfClasses string[] idf classes to use as a filter Property Value List<IdfObject> idf objects list from a list of classes Examples var zoneEquipment = Idf[\"ZoneHVAC:FourPipeFanCoil\",\"ZoneHVAC:PackagedTerminalAirConditioner\",\"ZoneHVAC:PackagedTerminalHeatPump\"]; Methods Add(IdfObject) public void Add(IdfObject value) Parameters value IdfObject AddDesignVariable(string, string, int, string) Adds a design variable for parametric/optimisation. Use in BeforeEnergySimulation hook. public void AddDesignVariable(string idfClass, string name, int field, string variableKey) Parameters idfClass string The idf class for the object to modify. e.g. \"Material\" name string Name of the object to modify. e.g. Insulation (searches for a name starting by that) field int Number of the field to change. e.g. 2 variableKey string ame of the variable key given in DesignBuilder. e.g. \"insulationthickness\" Examples Test different thickness values for a insulation material: AddDesignVariable(\"Material\",\"Variable Insulation\", 2, \"insulationthickness\"); Idf.Save(); AddDesignVariable(string, string, int, string, Func<double, double>) Adds a design variable for parametric/optimisation. Use in BeforeEnergySimulation hook. public void AddDesignVariable(string idfClass, string name, int field, string variableKey, Func<double, double> variableKeyFunction) Parameters idfClass string The idf class for the object to modify. e.g. \"Material\" name string Name of the object to modify. e.g. Insulation (searches for a name starting by that) field int Number of the field to change. e.g. 2 variableKey string ame of the variable key given in DesignBuilder. e.g. \"insulationthickness\" variableKeyFunction Func<double, double> Fuction to apply to the variableKey Examples Test different thickness values for a insulation material: AddDesignVariable(\"Material\",\"Variable Insulation\", 2, \"insulationthickness\", x=>x/100); Idf.Save(); AddKpi(Environment, string, double) Adds a Kpi result for parametric/optimisatin. Use in AfterEnergySimulation hook. public void AddKpi(Environment ApiEnvironment, string kpiName, double kpiValue) Parameters ApiEnvironment Environment kpiName string kpiValue double Clone() Returns a new cloned instance of the IdfReader public IdfReader Clone() Returns IdfReader Cloned IdfReader instance Clone(IdfObject) Makes a copy of a specified idf object and add it to the idf model. public void Clone(IdfObject idfObject) Parameters idfObject IdfObject idf object to clone. GetByIdfClasses(IEnumerable<string>) List of all the idf objects from the specified idf classes. public List<IdfObject> GetByIdfClasses(IEnumerable<string> idfClasses) Parameters idfClasses IEnumerable<string> idf classes to use as a filter Returns List<IdfObject> GetDataFromEso(string) Retrieves a value from the eso file saved with the SaveDataInEso method. public double? GetDataFromEso(string key) Parameters key string Name of the key or variable to retrieve. Returns double? GetVariable(string) Gets the value of the parametric variable defined in DesignBuilder optimization module as a Custom Idf variable. public string GetVariable(string name) Parameters name string Variable key used in DesignBuilder Returns string String holding the value of the variable. Load(string) Loads a portion of idf to an existing idf model. Do not include comments. public void Load(string idf) Parameters idf string Text containing the idf to load. Load(string[]) Loads a single IdfObject its sequence of elements public void Load(string[] fields) Parameters fields string[] idfclass, field1, field2 ... ReadData(string) Reads data from the precomments of the file public string ReadData(string key) Parameters key string Returns string RemoveData(string) Removes data from the precomments of the file public void RemoveData(string key) Parameters key string Save(bool) Saves the idf file overwriting the original. public void Save(bool comments = true) Parameters comments bool Include idf comments in the file. Save(string, bool, bool) Saves the idf file. public void Save(string idfFilePath, bool comments = true, bool ordered = false) Parameters idfFilePath string Path for the idf file. Use filename only to save in original idf folder. comments bool Include idf comments in the file. ordered bool Order idf clases by name. SaveASCII(bool) Saves the idf file overwriting the original. public void SaveASCII(bool comments = true) Parameters comments bool Include idf comments in the file. SaveASCII(string, bool, bool) Saves the idf file removing diacritics (á,é,ü...) and Spanish ñ public void SaveASCII(string idfFilePath, bool comments = true, bool ordered = false) Parameters idfFilePath string Path for the idf file. Use filename only to save in original idf folder. comments bool Include idf comments in the file. ordered bool Order idf clases by name. SaveDataInEso(string, double) Creates a numeric value than can be retrieved after simulation from the Eso results file. public void SaveDataInEso(string key, double value) Parameters key string Name of the key or variable to be used later for retrieval. value double Value of the variable ToString() Whole idf content as a text string. public override string ToString() Returns string idf content. WriteData(string, string) Writes data to the precomments of the file public void WriteData(string key, string value) Parameters key string value string"
  },
  "api/EpNet.LEED.LEED.html": {
    "href": "api/EpNet.LEED.LEED.html",
    "title": "Class LEED | EpNet",
    "keywords": "Class LEED Namespace EpNet.LEED Assembly EpNet.dll A collection of utilities for modelling according to Ashrae 90.1 App.G and LEED simulations. public static class LEED Inheritance object LEED Methods AllowedFanPower(SystemProperties, double, double) Calculates allowed fan power according to Ashrae 90.1-2010 App.G public static double AllowedFanPower(SystemProperties systemProperties, double airflow, double outdoorAirflow = 0) Parameters systemProperties SystemProperties One instance of SystemProperties. airflow double Total system airflow (l/s). outdoorAirflow double Only if exhaust fume hoods present (optional, l/s). Returns double Allowed fan power (W) COP(int, double) Gets COP value according to PNNL'S ANSI/ASHRAE/IES Standard 90.1-2010 Performance Rating Method Reference Manual public static double COP(int systemType, double coolingCapacity) Parameters systemType int Ashrae's system type 2 or 4 coolingCapacity double DX Coil Cooling Capacity Returns double DX Heating Coil COP value EER(int, double) Gets EER value according to PNNL'S ANSI/ASHRAE/IES Standard 90.1-2010 Performance Rating Method Reference Manual public static double EER(int systemType, double coolingCapacity) Parameters systemType int Ashrae's system type 1,2,4,5 or 6 coolingCapacity double DX Coil Cooling Capacity Returns double DX Cooling Coil EER InfiltrationRateAshrae(IdfReader) Gets whole building infiltration value according to PNNL'S ANSI/ASHRAE/IES Standard 90.1-2010 Performance Rating Method Reference Manual public static double InfiltrationRateAshrae(this IdfReader idf) Parameters idf IdfReader Idf model. Returns double Infiltration in ACH. Remarks The DOE-2 Infiltration methodology coefficients would be used, with 0.224 for wind speed coefficient. The default infiltration schedule shall be set equal to 1 when the fan system is off, and 0.25 when the fan system is on. InfiltrationRateAshrae(IdfReader, IEnumerable<string>) Gets one zone infiltration value according to PNNL'S ANSI/ASHRAE/IES Standard 90.1-2010 Performance Rating Method Reference Manual public static double InfiltrationRateAshrae(this IdfReader idf, IEnumerable<string> zoneList) Parameters idf IdfReader Idf model. zoneList IEnumerable<string> Zone list Returns double Infiltration in ACH. Remarks The DOE-2 Infiltration methodology coefficients would be used, with 0.224 for wind speed coefficient. The default infiltration schedule shall be set equal to 1 when the fan system is off, and 0.25 when the fan system is on. InfiltrationRateAshrae(IdfReader, string) Gets one zone infiltration value according to PNNL'S ANSI/ASHRAE/IES Standard 90.1-2010 Performance Rating Method Reference Manual public static double InfiltrationRateAshrae(this IdfReader idf, string zone) Parameters idf IdfReader Idf model. zone string Zone name. Returns double Infiltration in ACH. Remarks The DOE-2 Infiltration methodology coefficients would be used, with 0.224 for wind speed coefficient. The default infiltration schedule shall be set equal to 1 when the fan system is off, and 0.25 when the fan system is on. SetFanPressures(IdfReader, string, params SystemProperties[]) Sets fan pressures in specified systems taking into account Ashrae's Pressure Drop Adjustments. public static void SetFanPressures(this IdfReader idf, string csvTableFile, params SystemProperties[] systems) Parameters idf IdfReader Idf model. csvTableFile string Path to eplustbl.csv (or ModelNameTable.csv) file with comma delimited standard reports. systems SystemProperties[] SystemProperties holding common properties and the list of system names."
  },
  "api/EpNet.LEED.SystemProperties.Drop.html": {
    "href": "api/EpNet.LEED.SystemProperties.Drop.html",
    "title": "Class SystemProperties.Drop | EpNet",
    "keywords": "Class SystemProperties.Drop Namespace EpNet.LEED Assembly EpNet.dll Pressure drop properties public class SystemProperties.Drop Inheritance object SystemProperties.Drop Extension Methods ExtensionMethods.Deserialize<T>(T, string) ExtensionMethods.Serialize<T>(T) Properties Active Activate this type of pressure drop. public bool Active { get; set; } Property Value bool true if active Airflow Use total supply air for this drop. public double Airflow { get; set; } Property Value double true for using tootal supply airflow. Outdoor Use outdoor air for this drop. public bool Outdoor { get; set; } Property Value bool true for using outdoor airflow. PressureDrop Pressure drop value. public double PressureDrop { get; set; } Property Value double Pressure drop."
  },
  "api/EpNet.LEED.SystemProperties.html": {
    "href": "api/EpNet.LEED.SystemProperties.html",
    "title": "Class SystemProperties | EpNet",
    "keywords": "Class SystemProperties Namespace EpNet.LEED Assembly EpNet.dll Represents a list of Air-side HVAC systems (3-8) with common properties and provides Pressure Drop Adjustment calculation. public class SystemProperties Inheritance object SystemProperties Extension Methods ExtensionMethods.Deserialize<T>(T, string) ExtensionMethods.Serialize<T>(T) Constructors SystemProperties(int) Creates a definition of system properties of a specified type public SystemProperties(int type) Parameters type int System type (3-8) Properties AdditionalDrop Additional adjustment calculated externally (pressure adj x airflow) public double AdditionalDrop { get; set; } Property Value double Additional adjustment (Pa·l/s) ExhaustFumeHoods Exhaust system serving fume hoods. public SystemProperties.Drop ExhaustFumeHoods { get; set; } Property Value SystemProperties.Drop See Drop class FullyDucted Fully ducted return and/or exhaust air systems (except laboratory). public SystemProperties.Drop FullyDucted { get; set; } Property Value SystemProperties.Drop See Drop class FullyDuctedLab Fully ducted return and/or exhaust air systems in a laboratory. public SystemProperties.Drop FullyDuctedLab { get; set; } Property Value SystemProperties.Drop See Drop class Merv13to15 Particulate filtration credit: MERV 13 through 15. public SystemProperties.Drop Merv13to15 { get; set; } Property Value SystemProperties.Drop See Drop class Merv9to12 Particulate filtration credit: MERV 9 through 12. public SystemProperties.Drop Merv9to12 { get; set; } Property Value SystemProperties.Drop See Drop class Other Additional adjustment calculated externally which will be multiplied by airflow. public SystemProperties.Drop Other { get; set; } Property Value SystemProperties.Drop See Drop class ReturnControl Return and/or exhaust airflow control devices. public SystemProperties.Drop ReturnControl { get; set; } Property Value SystemProperties.Drop See Drop class SoundAttenuation Sound attenuation section. public SystemProperties.Drop SoundAttenuation { get; set; } Property Value SystemProperties.Drop See Drop class SupplyFanFlowFraction Fan flow fraction assigned to supply fan (optional). public double SupplyFanFlowFraction { get; set; } Property Value double Systems List of system names which share the same defined system properties. public List<string> Systems { get; set; } Property Value List<string> List of system names. Type System type according to Ashae system definition (3-8) public int Type { get; set; } Property Value int System type. Methods GetPressureDropAdjustment(double, double) Gets the pressure drop adjustment for this definition of properties and a specified airflow. public double GetPressureDropAdjustment(double totalAirflow = 0, double outdoorAirflow = 0) Parameters totalAirflow double Total airflow in the system (l/s) outdoorAirflow double Outdoor Airflow (only if exhaust fume hoods), (l/s) Returns double"
  },
  "api/EpNet.LEED.html": {
    "href": "api/EpNet.LEED.html",
    "title": "Namespace EpNet.LEED | EpNet",
    "keywords": "Namespace EpNet.LEED Classes LEED A collection of utilities for modelling according to Ashrae 90.1 App.G and LEED simulations. SystemProperties Represents a list of Air-side HVAC systems (3-8) with common properties and provides Pressure Drop Adjustment calculation. SystemProperties.Drop Pressure drop properties"
  },
  "api/EpNet.Library.Library.html": {
    "href": "api/EpNet.Library.Library.html",
    "title": "Class Library | EpNet",
    "keywords": "Class Library Namespace EpNet.Library Assembly EpNet.dll Library of additional features and utilities to work with EpNet and DesignBuilder public class Library Inheritance object Library Extension Methods ExtensionMethods.Deserialize<T>(T, string) ExtensionMethods.Serialize<T>(T) Constructors Library() public Library() Library(IdfReader) public Library(IdfReader idf) Parameters idf IdfReader Properties Api public Environment Api { get; set; } Property Value Environment Methods AddSensor(string, double, double, double, double) Adds a new daylight sensor at a deltaX, deltaY distance from the previous one. public void AddSensor(string zone, double deltaX, double deltaY, double fractionControlled, double illuminance) Parameters zone string Zone to add the sensor deltaX double X distance to previous existing sensor deltaY double Y distance to previous existing sensor fractionControlled double Light power fraction controlled by the sensor illuminance double Illuminance setpoint for the sensor BaselineSystem(int, Func<string, bool>, double, bool, string) public void BaselineSystem(int systemtype, Func<string, bool> filter, double supplyFanFlowFraction = 0.5, bool onlyOutdoorFullyDucted = true, string csvTableName = \"eplustbl\") Parameters systemtype int filter Func<string, bool> supplyFanFlowFraction double onlyOutdoorFullyDucted bool csvTableName string CO2WindowControl(Func<IdfObject, bool>, double, bool) Applies a CO₂ setpoint to openings with schedule set as On. An aditional filter can be used e.g. openingFilter = (o)=> o[0].Contains(\"Roof\") public void CO2WindowControl(Func<IdfObject, bool> openingFilter = null, double co2Setpoint = 450, bool reporting = true) Parameters openingFilter Func<IdfObject, bool> A function to filter the openings. co2Setpoint double CO₂ ppm setpoint to open reporting bool Generate additional reports for the CO₂ window control CoilSize(string, double, double) Sets the heating or cooling capacity for an airloop so that coils are sized accordingly public void CoilSize(string airloop, double heatingCapacity = -1, double coolingCapacity = -1) Parameters airloop string airloop name heatingCapacity double Heating capacity in W. Not used if negative. coolingCapacity double Cooling capacity in W. Not used if negative. ExportShading() Activates the export of the shading to be used later in a ImportShading public void ExportShading() FanOnOffToFanSystemModel(string, bool, params double[]) Changes Fan:OnOff fans into Fan:SystemModel, allowing multispeed in VRF, fancoils, etc. public void FanOnOffToFanSystemModel(string endUseSubcategory, bool continuous = true, params double[] speedFraction) Parameters endUseSubcategory string Only fans in which the End-Use Subcategory contains this text will be changed. continuous bool true for continuous speed control. Discrete control if false. speedFraction double[] list of speed fractions in case of discrete control. Use 1 value to define the minimum flow rate fraction in continuous control. Examples VRFFanOnOffToFanSystemModel(false,0.6,0.8,1) for a 3 speed fan( VRFFanOnOffToFanSystemModel(true,0.1) for a continuous fan with a minimum flow rate of 10% Remarks The power fraction will be calculated from the Fan Power Ratio Function of Speed Ratio Curve Name in the Fan:OnOff ImportShading(string) Imports a previously generated shading public void ImportShading(string path = \"\") Parameters path string Optional if the file is different from eplusshading.csv in DesignBuilder's EnergyPlus folder IsBaseline() Returns true if self shading is deactivated, which happens in baseline building in DesignBuilder. public bool IsBaseline() Returns bool true if baseline building OutdoorAirFromZone(string, params string[]) Overwrites outdoor air conditions (temperature and humidity) for an airloop with those from a thermal zone. public void OutdoorAirFromZone(string bufferZone, params string[] airloops) Parameters bufferZone string Thermal zone where conditions are taken. Equivalent airflow should be renewed (e.g. infiltration) to replace the one that is supposedly taken from the airloop. airloops string[] list of airloops that take bufferZone's conditions PVWatts(double, double, double, double, double, string, int) Introduces PV generation through Energyplus PVWatts feature public void PVWatts(double pvPower, double tilt, double azimuth, double inverterEfficiency = 0.96, double systemLosses = 0.14, string moduleType = \"Standard\", int number = 1) Parameters pvPower double PV Power in W tilt double Tilt of the modules azimuth double Azimuth of the modules inverterEfficiency double Inverter efficiency. Default: 0.96 systemLosses double System Losses. Default: 0.14 moduleType string Type of module. Default: Standard number int Number of the system in case you define more than one. 1, 2, 3... PlaceShell(double, double, double, double, string, string) Lets you put blocks (with zones) inside a bigger zone. You draw them separately in DesignBuilder. public void PlaceShell(double north, double xOffset, double yOffset, double zOffset, string exteriorZoneNameStartsWith, string otherZonesToMoveStartWith = \"\") Parameters north double North angle (Site orientation in DesignBuilder) xOffset double X distance to move the exterior shell zone (DesignBuilder coordinates) yOffset double Y distance to move the exterior shell zone (DesignBuilder coordinates) zOffset double Z distance to move the exterior shell zone (DesignBuilder coordinates) exteriorZoneNameStartsWith string First distintive characters of the name of the exterior zone (e.g the whole name) otherZonesToMoveStartWith string First distintive characters of the name of the zones to move inside (e.g. the name of the block) ScaleZoneOutdoor(double) Scales the zone outdoor airflow (DesignSpecification:OutdoorAir) public void ScaleZoneOutdoor(double scaleFactor) Parameters scaleFactor double multiplier to the current airflow ZoneArea(string, double) Overwrites the area of a zone public void ZoneArea(string zone, double area) Parameters zone string Name of the zone area double Area"
  },
  "api/EpNet.Library.html": {
    "href": "api/EpNet.Library.html",
    "title": "Namespace EpNet.Library | EpNet",
    "keywords": "Namespace EpNet.Library Classes Library Library of additional features and utilities to work with EpNet and DesignBuilder"
  },
  "api/EpNet.Psychrometrics.Psychro.html": {
    "href": "api/EpNet.Psychrometrics.Psychro.html",
    "title": "Class Psychro | EpNet",
    "keywords": "Class Psychro Namespace EpNet.Psychrometrics Assembly EpNet.dll public static class Psychro Inheritance object Psychro Methods CpAirFnWTdb(double, double) This function provides the heat capacity of air (J/kg-C) as function of humidity ratio and temperature. public static double CpAirFnWTdb(double w, double T) Parameters w double Humidity Ratio (kgWater/kgDryAir) T double Temperature (Celsius) Returns double Heat Capacity of air (J/kg-C) HFnTdbW(double, double) This function calculates air enthalpy (J/kg) from dry-bulb temperature and humidity ratio. public static double HFnTdbW(double T, double w) Parameters T double Temperature (Celsius) w double Humidity Ratio (kgWater/kgDryAir) Returns double Air Enthalpy (J/kg) HfgAirFnWTdb(double) This function provides latent energy of air as function of temperature. public static double HfgAirFnWTdb(double T) Parameters T double input temperature (Celsius) Returns double Heat of vaporization for moist air (J/kg) HgAirFnWTdb(double) This function provides latent energy of the moisture as a gas in the air as function of humidity ratio and temperature. public static double HgAirFnWTdb(double T) Parameters T double Input temperature (Celsius) Returns double // enthalpy of the gas (J/kg) PsatFnTemp(double) This function provides the saturation pressure as a function of temperature. public static double PsatFnTemp(double T) Parameters T double Dry-bulb temperature (C) Returns double Saturation Pressure (Pascals) RhFnTdbRhovLBnd0C(double, double) This function provides the Relative Humidity in air as a function of dry bulb temperature and Vapor Density. public static double RhFnTdbRhovLBnd0C(double Tdb, double Rhovapor) Parameters Tdb double Dry-bulb temperature (C) Rhovapor double vapor density in air (kg/m3) Returns double RhoAirFnPbTdbW(double, double, double) This function provides density of air as a function of barometric pressure, dry bulb temperature, and humidity ratio. public static double RhoAirFnPbTdbW(double pb, double tdb, double dw) Parameters pb double Barometric pressure (Pascals) tdb double Dry bulb temperature (Celsius) dw double Humidity ratio (kgWater/kgDryAir) Returns double Density of air (kg/m3) RhovFnTdbRhLBnd0C(double, double) This function provides the Vapor Density in air as a function of dry bulb temperature, and Relative Humidity. public static double RhovFnTdbRhLBnd0C(double Tdb, double RH) Parameters Tdb double Dry-bulb temperature (C) RH double Relative humidity value (0.0-1.0) Returns double Vapor density in air RhovFnTdbWPb(double, double, double) This function provides the Vapor Density in air as a function of Dry-bulb temperature, Humidity Ratio, and Barometric Pressure. public static double RhovFnTdbWPb(double Tdb, double W, double P) Parameters Tdb double W double Humidity Ratio P double Barometric Pressure (Pa) Returns double Vapor Density (kg/m3) TdbFnHW(double, double) This function provides air temperature from enthalpy and humidity ratio. public static double TdbFnHW(double H, double W) Parameters H double Entalphy (J/kg) W double Humidity ratio Returns double Dry-bulb temperature (C) TwbFnTdbWPb(double, double, double) This function provides the wet-bulb temperature from dry-bulb temperature, humidity ratio and barometric pressure. public static double TwbFnTdbWPb(double TDB, double dW, double Patm) Parameters TDB double Dry-bulb temperature dW double Humidity Ratio Patm double Barometric Pressure (Pa) Returns double Wet-Bulb temperature (C) VFnTdbWPb(double, double, double) This function provides the specific volume from dry-bulb temperature, humidity ratio and barometric pressure. public static double VFnTdbWPb(double TDB, double dW, double PB) Parameters TDB double Dry-bulb temperature (C) dW double Humidity ratio PB double Barometric pressure (Pascals) Returns double Specific volume (m3/kg) WFnTdbRhPb(double, double, double) This function provides the humidity ratio from dry-bulb temperature,relative humidity (value) and barometric pressure. public static double WFnTdbRhPb(double T, double RH, double P) Parameters T double Dry-bulb Temperature (C) RH double Relative Humidity value (0.0-1.0) P double Barometric Pressure (Pascals) Returns double WFnTdbTwbPb(double, double, double) This function provides the humidity ratio from dry-bulb temperature, wet-bulb temperature and barometric pressure. public static double WFnTdbTwbPb(double TDB, double TWB, double PB) Parameters TDB double Dry-bulb temperature (C) TWB double Wet-bulb temperature (C) PB double Barometric pressure (Pascals) Returns double Humidity Ratio"
  },
  "api/EpNet.Psychrometrics.html": {
    "href": "api/EpNet.Psychrometrics.html",
    "title": "Namespace EpNet.Psychrometrics | EpNet",
    "keywords": "Namespace EpNet.Psychrometrics Classes Psychro"
  },
  "api/EpNet.Results.Csv.html": {
    "href": "api/EpNet.Results.Csv.html",
    "title": "Class Csv | EpNet",
    "keywords": "Class Csv Namespace EpNet.Results Assembly EpNet.dll Provides methods for reading or saving data in csv format. public static class Csv Inheritance object Csv Methods GetColumns(string) Gets a Dictionary from a csv with Keys as column headers and Values as List of column numeric values. List separator (,) and decimal point (.) are those from Invariant Culture. public static Dictionary<string, List<double>> GetColumns(string file) Parameters file string Absolute path to the file. Returns Dictionary<string, List<double>> A Dictionary with Keys from the first column and Values as a list of values from the rest of the columns GetColumns(string, CultureInfo) Gets a Dictionary from a csv with Keys as column headers and Values as List of column numeric values. public static Dictionary<string, List<double>> GetColumns(string file, CultureInfo culture) Parameters file string Absolute path to the file. culture CultureInfo Speficied culture info. Returns Dictionary<string, List<double>> A Dictionary with Keys from the first column and Values as a list of values from the rest of the columns GetColumns<T>(string) Gets a Dictionary from a csv with Keys as column headers and Values as List of T with column values.List separator (,) and decimal point (.) are those from Invariant Culture. public static Dictionary<string, List<T>> GetColumns<T>(string file) Parameters file string Absolute path to the file. Returns Dictionary<string, List<T>> A Dictionary with Keys from the first column and Values as a list of values from the rest of the columns Type Parameters T string or double GetColumns<T>(string, CultureInfo) Gets a Dictionary from a csv with Keys as column headers and Values as List of T with column values. public static Dictionary<string, List<T>> GetColumns<T>(string file, CultureInfo culture) Parameters file string Absolute path to the file. culture CultureInfo Speficied culture info. Returns Dictionary<string, List<T>> A Dictionary with Keys from the first column and Values as a list of values from the rest of the columns Type Parameters T string or double GetData(string, CultureInfo, int, int) Gets a Dictionary from a csv file with a specified column as string Keys and a specified column as numeric Values. List separator and decimal point are those from a specified Culture. public static Dictionary<string, double> GetData(string file, CultureInfo culture, int col1 = 0, int col2 = 1) Parameters file string Absolute path to the file. culture CultureInfo Speficied culture info. col1 int Column for generating the Keys col2 int Column for generating the Values Returns Dictionary<string, double> A Dictionary with Keys from column 1 and Values from column 2 GetData(string, int, int) Gets a Dictionary from a csv file with a specified column as string Keys and a specified column as numeric Values. List separator (,) and decimal point (.) are those from Invariant Culture. public static Dictionary<string, double> GetData(string file, int col1 = 0, int col2 = 1) Parameters file string Absolute path to the file. col1 int Column for generating the Keys col2 int Column for generating the Values Returns Dictionary<string, double> A Dictionary with Keys from column 1 and Values from column 2 GetData<T>(string, CultureInfo, int, int) Gets a Dictionary from a csv file with a specified column as string Keys and a specified column as T Values. List separator and decimal point are those from a specified Culture. public static Dictionary<string, T> GetData<T>(string file, CultureInfo culture, int col1 = 0, int col2 = 1) Parameters file string Absolute path to the file. culture CultureInfo Speficied culture info. col1 int Column for generating the Keys col2 int Column for generating the Values Returns Dictionary<string, T> A Dictionary with Keys from column 1 and Values from column 2 Type Parameters T double or string GetData<T>(string, int, int) Gets a Dictionary from a csv file with a specified column as string Keys and a specified column as T Values. List separator (,) and decimal point (.) are those from Invariant Culture. public static Dictionary<string, T> GetData<T>(string file, int col1 = 0, int col2 = 1) Parameters file string Absolute path to the file. col1 int Column for generating the Keys col2 int Column for generating the Values Returns Dictionary<string, T> A Dictionary with Keys from column 1 and Values from column 2 Type Parameters T double or string GetRows(string) Gets a Dictionary from a csv file with the first column as string Keys and the Values with rest of columns as lists of numbers. List separator (,) and decimal point (.) are those from Invariant Culture. public static Dictionary<string, List<double>> GetRows(string file) Parameters file string Absolute path to the file. Returns Dictionary<string, List<double>> A Dictionary with Keys from the first column and Values as a list of numbers from the rest of the columns GetRows(string, CultureInfo) Gets a Dictionary from a csv file with the first column as string Keys and the Values with rest of columns as lists of numbers. List separator and decimal point are those from a specified Culture. public static Dictionary<string, List<double>> GetRows(string file, CultureInfo culture) Parameters file string Absolute path to the file. culture CultureInfo Speficied culture info. Returns Dictionary<string, List<double>> A Dictionary with Keys from the first column and Values as a list of numbers from the rest of the columns GetRows<T>(string) Gets a Dictionary from a csv file with the first column as string Keys and the Values with rest of columns as lists of T. List separator (,) and decimal point (.) are those from Invariant Culture. public static Dictionary<string, List<T>> GetRows<T>(string file) Parameters file string Absolute path to the file. Returns Dictionary<string, List<T>> A Dictionary with Keys from the first column and Values as a list of values from the rest of the columns Type Parameters T string or double GetRows<T>(string, CultureInfo) Gets a Dictionary from a csv file with the first column as string Keys and the Values with rest of columns as lists of T. List separator and decimal point are those from a specified Culture. public static Dictionary<string, List<T>> GetRows<T>(string file, CultureInfo culture) Parameters file string Absolute path to the file. culture CultureInfo Speficied culture info. Returns Dictionary<string, List<T>> A Dictionary with Keys from the first column and Values as a list of values from the rest of the columns. Type Parameters T string or double Save(string, IDictionary<string, double>, bool) Creates a text file and writes sequentially a dictionary as a string column (Key) and a numeric column (Value). public static void Save(string file, IDictionary<string, double> data, bool append = false) Parameters file string Absolute path to the file. data IDictionary<string, double> Dictionary of string and numeric data. append bool true for appending to an existing file. Save(string, IDictionary<string, string>, bool) Creates a text file and writes sequentially a dictionary as two a string columns (Key and Value). public static void Save(string file, IDictionary<string, string> data, bool append = false) Parameters file string Absolute path to the file. data IDictionary<string, string> Dictionary of string Keys and Values. append bool true for appending to an existing file. Save(string, IEnumerable<IEnumerable<double>>) Creates a text file and writes sequentially a list of list data. public static void Save(string file, IEnumerable<IEnumerable<double>> data) Parameters file string Absolute path to the file. data IEnumerable<IEnumerable<double>> Data list of numeric lists Save(string, IEnumerable<IEnumerable<string>>) Creates a text file and writes sequentially a list of list data. public static void Save(string file, IEnumerable<IEnumerable<string>> data) Parameters file string Absolute path to the file. data IEnumerable<IEnumerable<string>> Data list of string lists Save(string, IEnumerable<double>, bool) Creates a text file and writes sequentially a list of numeric data. public static void Save(string file, IEnumerable<double> data, bool append = false) Parameters file string Absolute path to the file. data IEnumerable<double> List of numeric data. append bool true for appending to an existing file. Save(string, params IEnumerable<double>[]) Creates a text file and writes sequentially a list of numeric data. public static void Save(string file, params IEnumerable<double>[] data) Parameters file string Absolute path to the file. data IEnumerable<double>[] Data array Save(string, IEnumerable<string>, bool) Creates a text file and writes sequentially a list of string data. public static void Save(string file, IEnumerable<string> data, bool append = false) Parameters file string Absolute path to the file. data IEnumerable<string> List of string data. append bool true for appending to an existing file. Save(string, params IEnumerable<string>[]) Creates a text file and writes sequentially a list of text strings. public static void Save(string file, params IEnumerable<string>[] data) Parameters file string Absolute path to the file. data IEnumerable<string>[] Data array"
  },
  "api/EpNet.Results.EioReader.html": {
    "href": "api/EpNet.Results.EioReader.html",
    "title": "Class EioReader | EpNet",
    "keywords": "Class EioReader Namespace EpNet.Results Assembly EpNet.dll Retrieves tables of result data from EnergyPlus output eio files. public class EioReader Inheritance object EioReader Extension Methods ExtensionMethods.Deserialize<T>(T, string) ExtensionMethods.Serialize<T>(T) Constructors EioReader(string) Creates an instance of EioReader. public EioReader(string filePath) Parameters filePath string Absolute path to the eio results file Methods GetTable(string, string, string) Gets a result table for a specified title and or subtitle. public ResultTable GetTable(string title, string subtitle = null, string stopTitle = \"\") Parameters title string Starts reading when finds this as ! <title>. subtitle string Extract data only from lines beginning with subtitle. Optional. stopTitle string Continue reading until stopTitle is found. If not set, stops when a new ! < is found. Returns ResultTable Result table with collected data."
  },
  "api/EpNet.Results.EsoReader.html": {
    "href": "api/EpNet.Results.EsoReader.html",
    "title": "Class EsoReader | EpNet",
    "keywords": "Class EsoReader Namespace EpNet.Results Assembly EpNet.dll Reads and writes result files in eso format. public class EsoReader Inheritance object EsoReader Extension Methods ExtensionMethods.Deserialize<T>(T, string) ExtensionMethods.Serialize<T>(T) Constructors EsoReader() Reads eplusout.eso from default DesignBuilder EnergyPlus folder. public EsoReader() EsoReader(string) Reads an Eso file. public EsoReader(string esoFilePath) Parameters esoFilePath string Eso file absolute path. EsoReader(params string[]) Reads more than one eso file as a joined set of results. public EsoReader(params string[] esoFilePaths) Parameters esoFilePaths string[] List of absolute paths. Properties Environments public List<string> Environments { get; set; } Property Value List<string> Id Returns a unique Id for a resultset. public static int Id { get; } Property Value int Id integer number. OldResults Retrieves the list of existent resultsets public List<ResultSet> OldResults { get; set; } Property Value List<ResultSet> ResultSet list. Results Retrieves the list of existent + newly created resultsets public IEnumerable<ResultSet> Results { get; } Property Value IEnumerable<ResultSet> ResultSet list. SingleEnvironment public bool SingleEnvironment { get; set; } Property Value bool Methods Add(ResultSet) Add a resultset. public void Add(ResultSet result) Parameters result ResultSet ResultSet. Add(params ResultSet[]) Add a param array of resultset. public void Add(params ResultSet[] results) Parameters results ResultSet[] Param array of ResultSets. Add(IEnumerable<ResultSet>) Adds a list of resultsets. public void Add(IEnumerable<ResultSet> results) Parameters results IEnumerable<ResultSet> List of resultsets. AddEsoFile(string) Reads another eso file and combines it with current results. public void AddEsoFile(string esoFilePath) Parameters esoFilePath string Absolute eso file path. First(string, string, Frequencies) Returns the first ResultSet that meets the conditions. Null if not found. public ResultSet First(string component, string reportType, Frequencies frequency) Parameters component string reportType string frequency Frequencies Returns ResultSet Get(Func<ResultSet, bool>) Retrieves all the ResultSets that meet the conditions. public IEnumerable<ResultSet> Get(Func<ResultSet, bool> conditions) Parameters conditions Func<ResultSet, bool> Returns IEnumerable<ResultSet> Get(string) Retrieves all the ResultSets that meet the conditions. public IEnumerable<ResultSet> Get(string componentOrreportType) Parameters componentOrreportType string Returns IEnumerable<ResultSet> Get(string, Frequencies) Retrieves all the ResultSets that meet the conditions. public IEnumerable<ResultSet> Get(string componentOrreportType, Frequencies frequency) Parameters componentOrreportType string frequency Frequencies Returns IEnumerable<ResultSet> Save(bool) Saves the eso file overwriting current eso file. public void Save(bool newResultsOnly = false) Parameters newResultsOnly bool Only save newly created results. Save(string, bool, bool) Saves the eso file in an new file. public void Save(string esoFilePath, bool newResultsOnly = false, bool sortNew = true) Parameters esoFilePath string Absolute path for the new eso file. newResultsOnly bool Only save newly created results. sortNew bool Adds a first blank character to new results so they appear first in Results Viewer TryGet(Func<ResultSet, bool>, out ResultSet) Finds the first ResultSet that meets the conditions. A return value indicates whether the result is found or not. public bool TryGet(Func<ResultSet, bool> conditions, out ResultSet result) Parameters conditions Func<ResultSet, bool> result ResultSet Returns bool TryGet(string, string, Frequencies, out ResultSet) Finds the ResultSet that meets the conditions. A return value indicates whether the result is found or not. public bool TryGet(string component, string reportType, Frequencies frequency, out ResultSet result) Parameters component string reportType string frequency Frequencies result ResultSet Returns bool TryGet(string, string, out ResultSet) Finds the first ResultSet that meets the conditions. A return value indicates whether the result is found or not. public bool TryGet(string component, string reportType, out ResultSet result) Parameters component string reportType string result ResultSet Returns bool"
  },
  "api/EpNet.Results.ExtensionMethods.html": {
    "href": "api/EpNet.Results.ExtensionMethods.html",
    "title": "Class ExtensionMethods | EpNet",
    "keywords": "Class ExtensionMethods Namespace EpNet.Results Assembly EpNet.dll Provides additional functionality in the form of extension methods. public static class ExtensionMethods Inheritance object ExtensionMethods Methods Average(IEnumerable<ResultSet>) Averages a list of result sets. public static ResultSet Average(this IEnumerable<ResultSet> results) Parameters results IEnumerable<ResultSet> Returns ResultSet Resulting Result Set. ContainsComponent(ResultSet, IEnumerable<string>) public static bool ContainsComponent(this ResultSet result, IEnumerable<string> values) Parameters result ResultSet values IEnumerable<string> Returns bool ContainsReport(ResultSet, IEnumerable<string>) public static bool ContainsReport(this ResultSet result, IEnumerable<string> values) Parameters result ResultSet values IEnumerable<string> Returns bool EqualsComponentReport(ResultSet, ResultSet) Returns true if component and reporttype are equal in both resultsets. public static bool EqualsComponentReport(this ResultSet result, ResultSet other) Parameters result ResultSet other ResultSet Returns bool EqualsDescriptor(ResultSet, ResultSet) Returns true if component, reporttype, units and frequency are equal in both resultsets. public static bool EqualsDescriptor(this ResultSet result, ResultSet other) Parameters result ResultSet other ResultSet Returns bool FillData(ResultSet, Func<double, bool>) Zeroes all the values in the dataset except those which satisfy the supplied filter function public static ResultSet FillData(this ResultSet result, Func<double, bool> filter) Parameters result ResultSet filter Func<double, bool> Filter function Returns ResultSet New resultset FilterData(ResultSet, Func<double, bool>, double) Sets all the values in the dataset to supplied value except those which satisfy the filter function public static ResultSet FilterData(this ResultSet result, Func<double, bool> filter, double valueFalse = 0) Parameters result ResultSet filter Func<double, bool> Filter function valueFalse double Value to be assigned to the elements that do not satisfy the filter criteria Returns ResultSet New resultset FilterData(ResultSet, Func<double, bool>, double, double) Values in the dataset that satisfy the filter are set to trueValue, the rest to falseValue public static ResultSet FilterData(this ResultSet result, Func<double, bool> filter, double trueValue, double falseValue) Parameters result ResultSet filter Func<double, bool> Filter function trueValue double Value to assign to the values that satisfy the filter function falseValue double Value to assign to the values that do not satisfy the filter function Returns ResultSet New resultset Get(IEnumerable<ResultSet>, string, string, Frequencies) Gets the result that matches the conditions. public static ResultSet Get(this IEnumerable<ResultSet> results, string component, string resultType, Frequencies frequency) Parameters results IEnumerable<ResultSet> component string resultType string frequency Frequencies Returns ResultSet GreaterOrEqual(ResultSet, double) Zeroes all the values in the resultset values greater or equal than an input value public static ResultSet GreaterOrEqual(this ResultSet result, double value) Parameters result ResultSet value double Returns ResultSet New resultset IsNotNull(ResultSet) True if the Resultset is not null public static bool IsNotNull(this ResultSet result) Parameters result ResultSet Returns bool IsNull(ResultSet) True if the Resultset is null public static bool IsNull(this ResultSet result) Parameters result ResultSet Returns bool LowerOrEqual(ResultSet, double) Zeroes all the values in the resultset values lower or equal than an input value public static ResultSet LowerOrEqual(this ResultSet result, double value) Parameters result ResultSet value double Returns ResultSet New resultset Negative(ResultSet) Returns a new resultset with only the negative values public static ResultSet Negative(this ResultSet result) Parameters result ResultSet Returns ResultSet Positive(ResultSet) Returns a new resultset with only the positive values public static ResultSet Positive(this ResultSet result) Parameters result ResultSet Returns ResultSet SetComponent(ResultSet, string) public static ResultSet SetComponent(this ResultSet result, string component) Parameters result ResultSet component string Returns ResultSet SetReportType(ResultSet, string) public static ResultSet SetReportType(this ResultSet result, string reportType) Parameters result ResultSet reportType string Returns ResultSet SetUnits(ResultSet, string) public static ResultSet SetUnits(this ResultSet result, string units) Parameters result ResultSet units string Returns ResultSet Sum(IEnumerable<ResultSet>) Sums a list of result sets. public static ResultSet Sum(this IEnumerable<ResultSet> results) Parameters results IEnumerable<ResultSet> Returns ResultSet Resulting Result Set. ToFrequency(ResultSet, Frequencies, bool) Transforms a result set from a specified frequency to another. Results can be summed or averaged during the transformation. public static ResultSet ToFrequency(this ResultSet result, Frequencies finalFrequency, bool average = false) Parameters result ResultSet Result sets to process. finalFrequency Frequencies Final Frequency. average bool If true, results are averaged. Returns ResultSet ToFrequency(IEnumerable<ResultSet>, Frequencies, bool) Transforms a list of result sets from a specified frequency to another. Results can be summed or averaged during the transformation. public static IEnumerable<ResultSet> ToFrequency(this IEnumerable<ResultSet> results, Frequencies finalFrequency, bool average = false) Parameters results IEnumerable<ResultSet> List of result sets to process. finalFrequency Frequencies Final Frequency. average bool If true, results are averaged. Returns IEnumerable<ResultSet> ToFrequencyAuto(ResultSet, Frequencies) Transforms a result set from a specified frequency to another. Averages if units are different from J, kg, m3 or hr. public static ResultSet ToFrequencyAuto(this ResultSet result, Frequencies finalFrequency) Parameters result ResultSet Result sets to process. finalFrequency Frequencies Final Frequency. Returns ResultSet ToKWh(ResultSet) Converts from J to kWh (divides between 3600000) public static ResultSet ToKWh(this ResultSet result) Parameters result ResultSet ResultSet with values in J Returns ResultSet ResultSet with values in kWh ToKWh(double) Converts from J to kWh (divides between 3600000) public static double ToKWh(this double value) Parameters value double Value in J Returns double Value in kWh Total(ResultSet) Sums the values from the Result dataset public static double Total(this ResultSet result) Parameters result ResultSet Returns double"
  },
  "api/EpNet.Results.Frequencies.html": {
    "href": "api/EpNet.Results.Frequencies.html",
    "title": "Enum Frequencies | EpNet",
    "keywords": "Enum Frequencies Namespace EpNet.Results Assembly EpNet.dll Result values frequency. public enum Frequencies Extension Methods ExtensionMethods.Deserialize<T>(T, string) ExtensionMethods.Serialize<T>(T) Fields Daily = 2 Daily frequency. Hourly = 1 Hourly frequency. Monthly = 3 Monthly frequency. RunPeriod = 4 RunPeriod frequency. Timestep = 0 Timestep frequency."
  },
  "api/EpNet.Results.ResultDescriptor.html": {
    "href": "api/EpNet.Results.ResultDescriptor.html",
    "title": "Class ResultDescriptor | EpNet",
    "keywords": "Class ResultDescriptor Namespace EpNet.Results Assembly EpNet.dll Stores eso result metadata. public class ResultDescriptor Inheritance object ResultDescriptor Extension Methods ExtensionMethods.Deserialize<T>(T, string) ExtensionMethods.Serialize<T>(T) Constructors ResultDescriptor(string, string, string) Creates a new Result Descriptor public ResultDescriptor(string reportType, string component, string units) Parameters reportType string Report type. component string Component name. units string Units. Properties Component Component this results refers to. public string Component { get; set; } Property Value string Model component name. Environment Simulation Environment. public string Environment { get; set; } Property Value string Environment name. Frequency Result time frequency public Frequencies Frequency { get; set; } Property Value Frequencies Timestep, Hourly, Daily, Monthly, RunPeriod. Id public int Id { get; set; } Property Value int ReportType Type of report. public string ReportType { get; set; } Property Value string E+ Output:Variable report type StartTime Results starting time. public DateTime StartTime { get; set; } Property Value DateTime Start time. TimeStep Result timestep in minutes. public double TimeStep { get; set; } Property Value double Timestep (min). Units Result units. public string Units { get; set; } Property Value string Unit (W, kg/s, C, %, ...). Methods Clone(string, string, string) Clones current Result Descriptor and allows to assign new report type, component name or units. public ResultDescriptor Clone(string reportType = \"\", string component = \"\", string units = \"\") Parameters reportType string Report type. component string Component Name. units string Units. Returns ResultDescriptor Cloned Result Descriptor."
  },
  "api/EpNet.Results.ResultSet.TimeSeriesData.html": {
    "href": "api/EpNet.Results.ResultSet.TimeSeriesData.html",
    "title": "Class ResultSet.TimeSeriesData | EpNet",
    "keywords": "Class ResultSet.TimeSeriesData Namespace EpNet.Results Assembly EpNet.dll Stores results as datetime, value pairs. public class ResultSet.TimeSeriesData Inheritance object ResultSet.TimeSeriesData Extension Methods ExtensionMethods.Deserialize<T>(T, string) ExtensionMethods.Serialize<T>(T) Properties Time DateTime value. public DateTime Time { get; set; } Property Value DateTime Time. Value Result value. public double Value { get; set; } Property Value double Value."
  },
  "api/EpNet.Results.ResultSet.html": {
    "href": "api/EpNet.Results.ResultSet.html",
    "title": "Class ResultSet | EpNet",
    "keywords": "Class ResultSet Namespace EpNet.Results Assembly EpNet.dll Stores an eso result and provides methods to operate with different result sets. public class ResultSet Inheritance object ResultSet Extension Methods ExtensionMethods.Deserialize<T>(T, string) ExtensionMethods.Serialize<T>(T) ExtensionMethods.ContainsComponent(ResultSet, IEnumerable<string>) ExtensionMethods.ContainsReport(ResultSet, IEnumerable<string>) ExtensionMethods.EqualsComponentReport(ResultSet, ResultSet) ExtensionMethods.EqualsDescriptor(ResultSet, ResultSet) ExtensionMethods.FillData(ResultSet, Func<double, bool>) ExtensionMethods.FilterData(ResultSet, Func<double, bool>, double) ExtensionMethods.FilterData(ResultSet, Func<double, bool>, double, double) ExtensionMethods.GreaterOrEqual(ResultSet, double) ExtensionMethods.IsNotNull(ResultSet) ExtensionMethods.IsNull(ResultSet) ExtensionMethods.LowerOrEqual(ResultSet, double) ExtensionMethods.Negative(ResultSet) ExtensionMethods.Positive(ResultSet) ExtensionMethods.SetComponent(ResultSet, string) ExtensionMethods.SetReportType(ResultSet, string) ExtensionMethods.SetUnits(ResultSet, string) ExtensionMethods.ToFrequency(ResultSet, Frequencies, bool) ExtensionMethods.ToFrequencyAuto(ResultSet, Frequencies) ExtensionMethods.ToKWh(ResultSet) ExtensionMethods.Total(ResultSet) Constructors ResultSet() Creates an empty result set. public ResultSet() ResultSet(ResultDescriptor) Creates an empty result set and assign a Result Descriptor. public ResultSet(ResultDescriptor resultDescriptor) Parameters resultDescriptor ResultDescriptor Result Descriptor to assign. ResultSet(ResultSet, double) Creates a new result set from an existing, optionally scaling the values. public ResultSet(ResultSet resultset, double multiplier = 1) Parameters resultset ResultSet Existing result set. multiplier double Quantity to multiply each value. Properties Component Gets/Sets the component name of current ResultSet Result Descriptor. public string Component { get; set; } Property Value string Compponent Name. Count Returns the number of result values in the result set. public int Count { get; } Property Value int Number of values. DataSet Sequencial numeric result values. public List<double> DataSet { get; set; } Property Value List<double> Numeric Result List. Frequency Gets/Sets the frequency of current ResultSet Result Descriptor. public Frequencies Frequency { get; set; } Property Value Frequencies Frequency. this[DateTime] Gets the value at a specified datetime. public double this[DateTime time] { get; set; } Parameters time DateTime DateTime to look for. Property Value double Value at the datetime. this[int] Returns the value at a specified index. public double this[int index] { get; set; } Parameters index int zero-based index. Property Value double Result value. ReportType Gets/Sets the report type of current ResultSet Result Descriptor. public string ReportType { get; set; } Property Value string Report Type. ResultDescriptor Gets/Sets the Result Descriptor associated to this result. public ResultDescriptor ResultDescriptor { get; set; } Property Value ResultDescriptor Result Descriptor. Units Gets/Sets the units of current ResultSet Result Descriptor. public string Units { get; set; } Property Value string Units. Methods Add(double) Add a new data point (numeric result) to the result list. public void Add(double value) Parameters value double Numeric value to add. Clone() Returns a Clone of the resultset public ResultSet Clone() Returns ResultSet Cloned instance GetDate(int) Gets the datetime from a specified index. public DateTime GetDate(int index) Parameters index int Index position. Returns DateTime Datetime GetIndex(DateTime) Gets the index from a specified datetime. public int GetIndex(DateTime dateTime) Parameters dateTime DateTime date time to search Returns int Index position. GetMaxDate() Gets the datetime for the maximum value. public DateTime GetMaxDate() Returns DateTime Max value Datetime. GetMaxIndex() Gets the index for the maximum value. public int GetMaxIndex() Returns int Max value index. GetMaxValue() Gets maximum value in the result set. public double GetMaxValue() Returns double Max value. GetMinDate() Gets the datetime for the minimum value. public DateTime GetMinDate() Returns DateTime Min Value Datetime. GetMinIndex() Gets the index for the minimum value. public int GetMinIndex() Returns int Min Value Index. GetMinValue() Gets minimum value in the result set. public double GetMinValue() Returns double Min value Match(string, string) Returns true if component and report match the provided values. public bool Match(string component, string reportType) Parameters component string reportType string Returns bool Match(string, string, Frequencies) Returns true if component and report match the provided values. public bool Match(string component, string reportType, Frequencies frequency) Parameters component string reportType string frequency Frequencies Returns bool MatchComponent(string) Returns true if component matches the provided value. public bool MatchComponent(string component) Parameters component string Returns bool MatchReport(string) Returns true if report matches the provided value. public bool MatchReport(string reportType) Parameters reportType string Returns bool SetValue(double) Sets a single value for all the data values in the ResultSet public void SetValue(double value) Parameters value double Sum(params ResultSet[]) Sums an array of result sets. public ResultSet Sum(params ResultSet[] results) Parameters results ResultSet[] array of result sets. Returns ResultSet Summed Result Set. TimeSeries() Gets the Result Set as a Time Series. public IEnumerable<ResultSet.TimeSeriesData> TimeSeries() Returns IEnumerable<ResultSet.TimeSeriesData> Time Series. Operators operator +(ResultSet, ResultSet) Adds two result sets public static ResultSet operator +(ResultSet r1, ResultSet r2) Parameters r1 ResultSet First result set. r2 ResultSet Second result set. Returns ResultSet Resulting Result Set. operator +(ResultSet, double) Adds a quantity to every value in a result set. public static ResultSet operator +(ResultSet r1, double value) Parameters r1 ResultSet Result Set value double Value to add. Returns ResultSet Resulting Result Set. operator /(ResultSet, ResultSet) Divides one result set by another. If division by cero inserts 0 value. public static ResultSet operator /(ResultSet r1, ResultSet r2) Parameters r1 ResultSet First Result Set. r2 ResultSet Second Result Set. Returns ResultSet Resulting Result Set. operator /(ResultSet, double) Divides by a quantity every value in a result set. public static ResultSet operator /(ResultSet r1, double value) Parameters r1 ResultSet Result Set value double Value to divide by. Returns ResultSet Resulting Result Set. operator ==(ResultSet, ResultSet) Get if all the results in the first resultset are equal in the second result set public static bool operator ==(ResultSet r1, ResultSet r2) Parameters r1 ResultSet First result set. r2 ResultSet Second result set. Returns bool True if equal operator >(ResultSet, ResultSet) Get if firstResultset is greater than second result sets public static bool operator >(ResultSet r1, ResultSet r2) Parameters r1 ResultSet First result set. r2 ResultSet Second result set. Returns bool True if greater operator !=(ResultSet, ResultSet) Get if any of the results in the first resultset is different in the second result set public static bool operator !=(ResultSet r1, ResultSet r2) Parameters r1 ResultSet First result set. r2 ResultSet Second result set. Returns bool True if different operator <(ResultSet, ResultSet) Get if firstResultset is lower than second result sets public static bool operator <(ResultSet r1, ResultSet r2) Parameters r1 ResultSet First result set. r2 ResultSet Second result set. Returns bool True if lower operator *(ResultSet, ResultSet) Multiplies two result sets. public static ResultSet operator *(ResultSet r1, ResultSet r2) Parameters r1 ResultSet First Result Set. r2 ResultSet Second Result Set. Returns ResultSet Resulting Result Set. operator *(ResultSet, double) Multiplies by a quantity every value in a result set. public static ResultSet operator *(ResultSet r1, double value) Parameters r1 ResultSet Result Set value double Value to multiply. Returns ResultSet Resulting Result Set. operator -(ResultSet, ResultSet) Substract one resultset from another. public static ResultSet operator -(ResultSet r1, ResultSet r2) Parameters r1 ResultSet First result set. r2 ResultSet Result set to substract. Returns ResultSet Resulting Result Set. operator -(ResultSet, double) Substracts a quantity to every value in a result set. public static ResultSet operator -(ResultSet r1, double value) Parameters r1 ResultSet Result Set value double Value to substract. Returns ResultSet Resulting Result Set. operator -(ResultSet) Negate a result set (multiply by -1 every value). public static ResultSet operator -(ResultSet r1) Parameters r1 ResultSet Result Set. Returns ResultSet Negated Result Set."
  },
  "api/EpNet.Results.ResultTable.html": {
    "href": "api/EpNet.Results.ResultTable.html",
    "title": "Class ResultTable | EpNet",
    "keywords": "Class ResultTable Namespace EpNet.Results Assembly EpNet.dll public class ResultTable Inheritance object ResultTable Extension Methods ExtensionMethods.Deserialize<T>(T, string) ExtensionMethods.Serialize<T>(T) Properties Header Stores the header of each column. public List<string> Header { get; set; } Property Value List<string> List of headers. this[int] Gets a table numeric column by its zero-based position. public IEnumerable<double> this[int column] { get; } Parameters column int Zero-based position Property Value IEnumerable<double> Result column. this[string] Gets a table numeric column by its header. public IEnumerable<double> this[string column] { get; } Parameters column string Column header Property Value IEnumerable<double> Result column. Rows Stores the rows. public List<List<string>> Rows { get; set; } Property Value List<List<string>> List of rows (as list of strings). Methods Compare(ResultTable) Returns a text specifying how the tables are different. Empty if equal. public string Compare(ResultTable table) Parameters table ResultTable Table to compare with. Returns string Text message on how the tables are different. Equals(ResultTable) Determines whether 2 tables are equal. public bool Equals(ResultTable table) Parameters table ResultTable Returns bool true if the tables are equal; otherwise, false. Get(int, int) Get text value from a row and header positions. public double Get(int rowNumber, int columnNumber) Parameters rowNumber int Row zero-based position. columnNumber int Column zero-based position. Returns double Text value. Get(int, string) Get numeric value from a row position and header name public double Get(int rowNumber, string columnHeader) Parameters rowNumber int Row zero-based position. columnHeader string Column header name. Returns double Numeric value. Get(string, int) Get numeric value from a row header and column position. public double Get(string rowHeader, int columnNumber) Parameters rowHeader string Row zero-based position. columnNumber int Column zero-based position. Returns double Numeric value. Get(string, string) Get numeric value from a row header and column header name. public double Get(string rowHeader, string columnHeader) Parameters rowHeader string Row header name. columnHeader string Column header name. Returns double Numeric value. GetColumn(int) Gets a table numeric column by its zero-based position. Non-numeric values (blank,-, etc) are returned as 0. public IEnumerable<double> GetColumn(int column) Parameters column int Zero-based position Returns IEnumerable<double> Result column. GetColumn(string) Gets a table numeric column by its header. Non-numeric values (blank,-, etc) are returned as 0. public IEnumerable<double> GetColumn(string column) Parameters column string Column header Returns IEnumerable<double> Result column. GetData(int, int) Gets a Dictionary from a result table with a specified column as string Keys and a specified column as numeric Values. Non-numeric values (blank,-, etc) are returned as 0. public Dictionary<string, double> GetData(int componentColumn, int valueColumn) Parameters componentColumn int Zero-based column position for generating the Keys valueColumn int Zero-based column position for generating the Values Returns Dictionary<string, double> A Dictionary with Keys from column 1 and Values from column 2 GetData(int, string) Gets a Dictionary from a result table with a specified column as string Keys and a specified column as numeric Values. Non-numeric values (blank,-, etc) are returned as 0. public Dictionary<string, double> GetData(int componentColumn, string valueColumn) Parameters componentColumn int Zero-based column position for generating the Keys valueColumn string Column header for generating the Values Returns Dictionary<string, double> A Dictionary with Keys from column 1 and Values from column 2 GetData(string, int) Gets a Dictionary from a result table with a specified column as string Keys and a specified column as numeric Values. Non-numeric values (blank,-, etc) are returned as 0. public Dictionary<string, double> GetData(string componentColumn, int valueColumn) Parameters componentColumn string Column header for generating the Keys valueColumn int Zero-based column position for generating the Values Returns Dictionary<string, double> A Dictionary with Keys from column 1 and Values from column 2 GetData(string, string) Gets a Dictionary from a result table with a specified column as string Keys and a specified column as numeric Values. Non-numeric values (blank,-, etc) are returned as 0. public Dictionary<string, double> GetData(string componentColumn, string valueColumn) Parameters componentColumn string Column header for generating the Keys valueColumn string Column header for generating the Values Returns Dictionary<string, double> A Dictionary with Keys from column 1 and Values from column 2 GetData<T>(int, int) Gets a Dictionary from a result table with a specified column as string Keys and a specified column as T Values. Blank cells are not returned. public Dictionary<string, T> GetData<T>(int componentColumn, int valueColumn) Parameters componentColumn int Zero-based column position for generating the Keys valueColumn int Zero-based column position for generating the Values Returns Dictionary<string, T> A Dictionary with Keys from column 1 and Values from column 2 Type Parameters T double or string GetData<T>(int, string) Gets a Dictionary from a result table with a specified column as string Keys and a specified column as T Values. Blank cells are not returned. public Dictionary<string, T> GetData<T>(int componentColumn, string valueColumn) Parameters componentColumn int Zero-based column position for generating the Keys valueColumn string Column header for generating the Values Returns Dictionary<string, T> A Dictionary with Keys from column 1 and Values from column 2 Type Parameters T double or string GetData<T>(string, int) Gets a Dictionary from a result table with a specified column as string Keys and a specified column as T Values. Blank cells are not returned. public Dictionary<string, T> GetData<T>(string componentColumn, int valueColumn) Parameters componentColumn string Column header for generating the Keys valueColumn int Zero-based column position for generating the Values Returns Dictionary<string, T> A Dictionary with Keys from column 1 and Values from column 2 Type Parameters T double or string GetData<T>(string, string) Gets a Dictionary from a result table with a specified column as string Keys and a specified column as T Values. Blank cells are not returned. public Dictionary<string, T> GetData<T>(string componentColumn, string valueColumn) Parameters componentColumn string Column header for generating the Keys valueColumn string Column header for generating the Values Returns Dictionary<string, T> A Dictionary with Keys from column 1 and Values from column 2 Type Parameters T double or string GetText(int, int) Get text value from a row and header positions. public string GetText(int rowNumber, int columnNumber) Parameters rowNumber int Row zero-based position. columnNumber int Column zero-based position. Returns string Text value. GetText(int, string) Get text value from a row position and header name public string GetText(int rowNumber, string columnHeader) Parameters rowNumber int Row zero-based position. columnHeader string Column header name. Returns string Text value. GetText(string, int) Get text value from a row header and column position. public string GetText(string rowHeader, int columnNumber) Parameters rowHeader string Row zero-based position. columnNumber int Column zero-based position. Returns string Text value. GetText(string, string) Get text value from a row header and column header name. public string GetText(string rowHeader, string columnHeader) Parameters rowHeader string Row header name. columnHeader string Column header name. Returns string Text value. GetTextColumn(int) Gets a table text column by its zero-based position. public IEnumerable<string> GetTextColumn(int column) Parameters column int Zero-based position Returns IEnumerable<string> Result column. GetTextColumn(string) Gets a table text column by its header. Blank cells are not returned. public IEnumerable<string> GetTextColumn(string column) Parameters column string Column header Returns IEnumerable<string> Result column. Operators operator ==(ResultTable, ResultTable) Determines whether 2 tables are different. public static bool operator ==(ResultTable a, ResultTable b) Parameters a ResultTable First table to compare b ResultTable Second string to compare. Returns bool true if the tables are different; otherwise, false. operator !=(ResultTable, ResultTable) Determines whether 2 tables are equal. public static bool operator !=(ResultTable a, ResultTable b) Parameters a ResultTable First table to compare b ResultTable Second string to compare. Returns bool true if the tables are equal; otherwise, false."
  },
  "api/EpNet.Results.Ssz.html": {
    "href": "api/EpNet.Results.Ssz.html",
    "title": "Class Ssz | EpNet",
    "keywords": "Class Ssz Namespace EpNet.Results Assembly EpNet.dll Reads a modelSsz.csv sizing results file public static class Ssz Inheritance object Ssz Methods GetColumns(string) Gets the ssz file columns as a dictionary of header as key. public static Dictionary<string, List<double>> GetColumns(string file) Parameters file string ssz.csv file path Returns Dictionary<string, List<double>>"
  },
  "api/EpNet.Results.TableReader.html": {
    "href": "api/EpNet.Results.TableReader.html",
    "title": "Class TableReader | EpNet",
    "keywords": "Class TableReader Namespace EpNet.Results Assembly EpNet.dll Reads a EnergyPlus output result table (csv, comma or tab separated). public class TableReader Inheritance object TableReader Extension Methods ExtensionMethods.Deserialize<T>(T, string) ExtensionMethods.Serialize<T>(T) Constructors TableReader(string, char) Creates a Table Reader. public TableReader(string filePath, char separator = ',') Parameters filePath string E+ output file path. separator char Field delimiter. Properties this[string] Gets a table by its title. public ResultTable this[string title] { get; } Parameters title string Table title. Property Value ResultTable Result table. Methods GetTable(string, string) Gets a table by its title. public ResultTable GetTable(string title, string report = \"\") Parameters title string Table title. report string Report name (optional, useful when same table title is in different reports). Returns ResultTable Result table."
  },
  "api/EpNet.Results.html": {
    "href": "api/EpNet.Results.html",
    "title": "Namespace EpNet.Results | EpNet",
    "keywords": "Namespace EpNet.Results Classes Csv Provides methods for reading or saving data in csv format. EioReader Retrieves tables of result data from EnergyPlus output eio files. EsoReader Reads and writes result files in eso format. ExtensionMethods Provides additional functionality in the form of extension methods. ResultDescriptor Stores eso result metadata. ResultSet Stores an eso result and provides methods to operate with different result sets. ResultSet.TimeSeriesData Stores results as datetime, value pairs. ResultTable Ssz Reads a modelSsz.csv sizing results file TableReader Reads a EnergyPlus output result table (csv, comma or tab separated). Enums Frequencies Result values frequency."
  },
  "api/EpNet.html": {
    "href": "api/EpNet.html",
    "title": "Namespace EpNet | EpNet",
    "keywords": "Namespace EpNet Classes ExtensionMethods Provides additional functionality in the form of extension methods. Field Field class represent a field in an idf object. It implements methods for getting/setting numeric or string values. Value property refers to the string representation of the field but if the field is numeric it can also be retrieved as a double variable using the Number property. Idd This class is used to store a reference to a specific Energy+.idd version so that field number/name conversion is done accordingly. IdfObject Represents an individual idf object, as a enumeration of fields IdfReader Provides methods to manipulate an idf model by accessing to the different idf classes and their fields."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "EpNet Api Documentation | EpNet",
    "keywords": "EpNet Api Documentation Welcome to EpNet Api documentation. Here you will find a description of all the classes, properties and methods available in EpNet library. Save time and enjoy an even more powerful DesignBuilder with EpNet Library!"
  },
  "index.html": {
    "href": "index.html",
    "title": "EpNet .Net library online help | EpNet",
    "keywords": "EpNet .Net library online help EpNet is a .Net library which provides very useful utilities to manipulate EnergyPlus files. It makes very easy to modify idf files but it additionally allows to read and write EnergyPlus result eso files or extract data from csv table outputs. EpNet is integrated in DesignBuilder Scripting module where scripts developed with EpNet are usually executed after idf generation and before simulation. EpNet library is developed and mantained by Germán Campos, www.ecoeficiente.es. Latest download link: 06 Apr 2024 - Download latest EpNet library. And overwrite current EpNet.dll in *c:\\Program Files (x86)\\DesignBuilder\\Lib* folder Usage examples: The easiest way to understand how to use EpNet library is to look at the following examples and use the Api Reference. The class that reads the idf file and stores the list of idf objects is IdfReader. So, first of all we have to create an IdfReader object: var Idf = IdfReader(); After processing the Idf, the file must be saved: Idf.Save(); Now, let's see some of the things we can do with the IdfReader object. ###Example 1 Get all the zones in the idf: var zones = Idf[\"Zone\"]; Get all the surfaces in the idf: var surfaces = Idf[\"BuildingSurface:Detailed\"]; zones and surfaces are now a List of IdfObjects An IdfObject has [Fields](xref:EpNet.Field] and each field can have a value (Value or Number) and a Commment. Fields can be accessed by its zero-based index or by their name (according to Energy+.idd). Let's pick the first zone: var zone = zones[0]; And change its name to \"Zone1\": Accessing fields by index Accessing fields by name zone[0].Value = \"Zone1\"; zone[\"Name\"].Value = \"Zone1\"; Text values are accessed through Value property while numeric values are usually accessed through Number property (unless you want to treat them as a string value). Accessing fields by index Accessing fields by name double zoneArea = zone[9].Number; string zoneAreaValue = zone[9].Value; zone[9].Number = zoneArea * 2; //Duplicate zone area. zone[0].Value = zoneAreaValue + \"sqm.Zone1\"; //Include zone area in its name. double zoneArea = zone[\"Floor Area\"].Number; string zoneAreaValue = zone[\"Floor Area\"].Value; zone[\"Floor Area\"].Number = zoneArea * 2; //Duplicate zone area. zone[\"Name\"].Value = zoneAreaValue + \"sqm.Zone1\"; //Include zone area in its name. ###Example 2 The following code updates simple glazing parameters to include the impact of a frame fraction. Accessing fields by index Accessing fields by name var glass = Idf[\"WindowMaterial:SimpleGlazingSystem\"]; var frameFrac= 0.15; var frameU = 2.8; var frameAbs = 0.9; foreach (var g in glass) { var U = g[1].Number; var SHGC = g[2].Number; var t = g[3].Number; g[1].Number = U*(1-frameFrac)+frameFrac*frameU; g[2].Number = SHGC*(1-frameFrac)+0.04*frameAbs*frameU; g[3].Number = t*(1-frameFrac); } var glass = Idf[\"WindowMaterial:SimpleGlazingSystem\"]; var frameFrac= 0.15; var frameU = 2.8; var frameAbs = 0.9; foreach (var g in glass) { var U = g[\"U-Factor\"].Number; var SHGC = g[\"Solar Heat Gain Coefficient\"].Number; var t = g[\"Visible Transmittance\"].Number; g[\"U-Factor\"].Number = U*(1-frameFrac)+frameFrac*frameU; g[\"Solar Heat Gain Coefficient\"].Number = SHGC*(1-frameFrac)+0.04*frameAbs*frameU; g[\"Visible Transmittance\"].Number = t*(1-frameFrac); } ###Example 3 Let's do something more complex. We will change the insulation material layer in the facades that belong to zones larger than 100 sqm. We will use LINQ extension methods which are very useful and simplify the code when used with EpNet. var zones = Idf[\"Zone\"]; var surfaces = Idf[\"BuildingSurface:Detailed\"]; //Load method can read an idf file or parse a text string in idf format. //In this case, we use it to create a new insulation material named \"XPS\". Idf.Load(\"Material,XPS,Smooth,0.05,0.04,80,1450,0.9,0.7,0.7;\"); //We use \"First\" extension method to search the first construction whose name is \"Facade\". var facade = Idf[\"Construction\"].First(c => c[\"Name\"] == \"Facade\"); //We make a copy of this construction. var newFacade = facade.Clone(); //Change its name, newFacade[\"Name\"].Value = \"New Facade\"; //and search the first Field that contains \"MW\" and change its value to \"XPS\". newFacade.First(f => f.Contains(\"MW\")).Value = \"XPS\"; //Finally, we add it to the Idf. Idf.Add(newFacade); //We select all the zones with an area > 100 foreach (var zone in zones.Where(z => z[\"Floor Area\"].Number > 100)) //and from all surfaces of type wall we choose those that belong to those zones foreach (var surface in surfaces.Where(s => s[\"Surface Type\"] == \"Wall\" && s[\"Zone Name\"] == zone[\"Name\"])) surface[\"Construction Name\"].Value = \"New Facade\"; //and change their construction to the new facade. ###Example 4 There are many things that can be done with EpNet, such as working with results. This example uses EsoReader to read eso results, select some, add them and get them translated to another time frequency and units. var Eso = new EsoReader(); //Loads eplusout.eso from simulation folder. //Let's select those hourly results referred to zones and with W as unit. var zoneResults = Eso.Results .Where(r => r.ReportType.StartsWith(\"Zone\") && r.Frequency == Frequencies.Hourly && r.Units == \"W\") .GroupBy(g => g.ReportType); foreach (var zoneResult in zoneResults) { //Sum them and change component name to \"Zone Total\" var zoneTotal = zoneResult.Sum().SetComponent(\"Zone Total\"); //Average them and change component name to \"Zone Average\" var zoneAverage = zoneResult.Average().SetComponent(\"Zone Average\"); //Add them to the EsoReader Eso.Add(zoneAverage); Eso.Add(zoneTotal); //Add zone totals but translated to monthly frequency and MBtu Eso.Add(zoneTotal.ToFrequency(Frequencies.Monthly).SetUnits(\"MBtu\")*3.412e-3); } Eso.Save(); //The eso file is overwritten with old and new results. ###Example 5 You can even set equipment efficiencies according to Ashrae 90.1 minimum efficiency requirement for LEED baseline models. //Read EnergyPlus comma delimited result file. var tablePath = @\"eplustbl.csv\"; var tableReader = new TableReader(tablePath); //Get a dictionary<Key,Value> with column 0 as keys and column 2 as values from Coil:Cooling:DX:SingleSpeed table. var coolingCoils = tableReader.GetTable(\"Coil:Cooling:DX:SingleSpeed\").GetData(0, 2); //Loop through the cooling coils and assign Ashrae minimum efficiency for a System 4 DX cooling coil. foreach (var coil in coolingCoils) { Idf[\"Coil:Cooling:DX:SingleSpeed\"].First(o => o[0].Equals(coil.Key))[4].Number = LEED.EER(4, coil.Value); } //Repeat for heating coils var heatingCoils = tableReader.GetTable(\"Coil:Heating:DX:SingleSpeed\").GetData(0, 2); foreach (var coil in heatingCoils) { Idf[\"Coil:Heating:DX:SingleSpeed\"].First(o => o[0].Equals(coil.Key))[3].Number = LEED.COP(4, coil.Value); } Or set fan power according to Ashrae procedure for baseline fans. //Set system properties for System 4 airloops in the model. var sP4 = new SystemProperties(4); sP4.FullyDucted = true; //Configure the pressure loss in the system sP4.Merv13to15 = true; //Get airloop names (GetAirloopZones gets a dictionary with airloop as Keys and List of zones as Values) var airloops = Idf.GetAirloopZones().Keys; //Assign airloops that meet those properties. sP4.Systems.AddRange(airloops); //Set Fan Pressures for those system 4 airloop fans. Idf.SetFanPressures(@\"eplustbl.csv\", sP4); ###Example 6 Finally, thanks to DesignBuilder API, C# (with or without EpNet) can be used to change DesignBuilder model as in this example: //Get a dictionary with current names as Keys and updated names as Values var zoneNames=Csv.GetData<string>(@\"c:\\temp\\ZoneNames.csv\"); //Get a reference to model site var site = ApiEnvironment.Site; //Loop through buildings and zones foreach (var building in site.Buildings) foreach (var block in building.BuildingsBlocks) foreach (var zone in block.Zones) { //Get the name of the zone from DesignBuilder model var name = zone.getAttribute(\"Title\"); //If it is in the list of names to be updated if (zoneNames.ContainsKey(name)) zone.setAttribute(\"Title\", zoneNames[name]);//Update the name }"
  }
}